// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file services.proto (package services, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TaskGraphValueRequest, TaskGraphValueResponse } from "./tasks_pb.js";
import { Error } from "./errors_pb.js";
import { PreTransformExtractResponse, PreTransformSpecResponse, PreTransformValuesResponse } from "./pretransform_pb.js";

/**
 * @generated from message services.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * @generated from oneof services.QueryRequest.request
   */
  request: {
    /**
     * @generated from field: tasks.TaskGraphValueRequest task_graph_values = 1;
     */
    value: TaskGraphValueRequest;
    case: "taskGraphValues";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_graph_values", kind: "message", T: TaskGraphValueRequest, oneof: "request" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * @generated from message services.QueryResult
 */
export class QueryResult extends Message<QueryResult> {
  /**
   * @generated from oneof services.QueryResult.response
   */
  response: {
    /**
     * @generated from field: errors.Error error = 1;
     */
    value: Error;
    case: "error";
  } | {
    /**
     * @generated from field: tasks.TaskGraphValueResponse task_graph_values = 2;
     */
    value: TaskGraphValueResponse;
    case: "taskGraphValues";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<QueryResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.QueryResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: Error, oneof: "response" },
    { no: 2, name: "task_graph_values", kind: "message", T: TaskGraphValueResponse, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResult {
    return new QueryResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResult {
    return new QueryResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResult {
    return new QueryResult().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResult | PlainMessage<QueryResult> | undefined, b: QueryResult | PlainMessage<QueryResult> | undefined): boolean {
    return proto3.util.equals(QueryResult, a, b);
  }
}

/**
 * @generated from message services.PreTransformSpecResult
 */
export class PreTransformSpecResult extends Message<PreTransformSpecResult> {
  /**
   * @generated from oneof services.PreTransformSpecResult.result
   */
  result: {
    /**
     * @generated from field: errors.Error error = 1;
     */
    value: Error;
    case: "error";
  } | {
    /**
     * @generated from field: pretransform.PreTransformSpecResponse response = 2;
     */
    value: PreTransformSpecResponse;
    case: "response";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PreTransformSpecResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.PreTransformSpecResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: Error, oneof: "result" },
    { no: 2, name: "response", kind: "message", T: PreTransformSpecResponse, oneof: "result" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformSpecResult {
    return new PreTransformSpecResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformSpecResult {
    return new PreTransformSpecResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformSpecResult {
    return new PreTransformSpecResult().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformSpecResult | PlainMessage<PreTransformSpecResult> | undefined, b: PreTransformSpecResult | PlainMessage<PreTransformSpecResult> | undefined): boolean {
    return proto3.util.equals(PreTransformSpecResult, a, b);
  }
}

/**
 * @generated from message services.PreTransformValuesResult
 */
export class PreTransformValuesResult extends Message<PreTransformValuesResult> {
  /**
   * @generated from oneof services.PreTransformValuesResult.result
   */
  result: {
    /**
     * @generated from field: errors.Error error = 1;
     */
    value: Error;
    case: "error";
  } | {
    /**
     * @generated from field: pretransform.PreTransformValuesResponse response = 2;
     */
    value: PreTransformValuesResponse;
    case: "response";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PreTransformValuesResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.PreTransformValuesResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: Error, oneof: "result" },
    { no: 2, name: "response", kind: "message", T: PreTransformValuesResponse, oneof: "result" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformValuesResult {
    return new PreTransformValuesResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformValuesResult {
    return new PreTransformValuesResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformValuesResult {
    return new PreTransformValuesResult().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformValuesResult | PlainMessage<PreTransformValuesResult> | undefined, b: PreTransformValuesResult | PlainMessage<PreTransformValuesResult> | undefined): boolean {
    return proto3.util.equals(PreTransformValuesResult, a, b);
  }
}

/**
 * @generated from message services.PreTransformExtractResult
 */
export class PreTransformExtractResult extends Message<PreTransformExtractResult> {
  /**
   * @generated from oneof services.PreTransformExtractResult.result
   */
  result: {
    /**
     * @generated from field: errors.Error error = 1;
     */
    value: Error;
    case: "error";
  } | {
    /**
     * @generated from field: pretransform.PreTransformExtractResponse response = 2;
     */
    value: PreTransformExtractResponse;
    case: "response";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PreTransformExtractResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.PreTransformExtractResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: Error, oneof: "result" },
    { no: 2, name: "response", kind: "message", T: PreTransformExtractResponse, oneof: "result" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformExtractResult {
    return new PreTransformExtractResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformExtractResult {
    return new PreTransformExtractResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformExtractResult {
    return new PreTransformExtractResult().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformExtractResult | PlainMessage<PreTransformExtractResult> | undefined, b: PreTransformExtractResult | PlainMessage<PreTransformExtractResult> | undefined): boolean {
    return proto3.util.equals(PreTransformExtractResult, a, b);
  }
}

