// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file errors.proto (package errors, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message errors.TaskGraphValueError
 */
export class TaskGraphValueError extends Message<TaskGraphValueError> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<TaskGraphValueError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "errors.TaskGraphValueError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskGraphValueError {
    return new TaskGraphValueError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskGraphValueError {
    return new TaskGraphValueError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskGraphValueError {
    return new TaskGraphValueError().fromJsonString(jsonString, options);
  }

  static equals(a: TaskGraphValueError | PlainMessage<TaskGraphValueError> | undefined, b: TaskGraphValueError | PlainMessage<TaskGraphValueError> | undefined): boolean {
    return proto3.util.equals(TaskGraphValueError, a, b);
  }
}

/**
 * @generated from message errors.Error
 */
export class Error extends Message<Error> {
  /**
   * @generated from oneof errors.Error.errorkind
   */
  errorkind: {
    /**
     * @generated from field: errors.TaskGraphValueError error = 1;
     */
    value: TaskGraphValueError;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "errors.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: TaskGraphValueError, oneof: "errorkind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

