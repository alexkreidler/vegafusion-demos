// source: tasks.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var expression_pb = require('./expression_pb.js');
goog.object.extend(proto, expression_pb);
var transforms_pb = require('./transforms_pb.js');
goog.object.extend(proto, transforms_pb);
goog.exportSymbol('proto.tasks.DataSourceTask', null, global);
goog.exportSymbol('proto.tasks.DataUrlTask', null, global);
goog.exportSymbol('proto.tasks.DataUrlTask.UrlCase', null, global);
goog.exportSymbol('proto.tasks.DataValuesTask', null, global);
goog.exportSymbol('proto.tasks.IncomingEdge', null, global);
goog.exportSymbol('proto.tasks.NodeValueIndex', null, global);
goog.exportSymbol('proto.tasks.OutgoingEdge', null, global);
goog.exportSymbol('proto.tasks.ParseFieldSpec', null, global);
goog.exportSymbol('proto.tasks.ParseFieldSpecs', null, global);
goog.exportSymbol('proto.tasks.ResponseTaskValue', null, global);
goog.exportSymbol('proto.tasks.ScanUrlFormat', null, global);
goog.exportSymbol('proto.tasks.ScanUrlFormat.ParseCase', null, global);
goog.exportSymbol('proto.tasks.SignalTask', null, global);
goog.exportSymbol('proto.tasks.Task', null, global);
goog.exportSymbol('proto.tasks.Task.TaskKindCase', null, global);
goog.exportSymbol('proto.tasks.TaskGraph', null, global);
goog.exportSymbol('proto.tasks.TaskGraphValueRequest', null, global);
goog.exportSymbol('proto.tasks.TaskGraphValueResponse', null, global);
goog.exportSymbol('proto.tasks.TaskNode', null, global);
goog.exportSymbol('proto.tasks.TaskValue', null, global);
goog.exportSymbol('proto.tasks.TaskValue.DataCase', null, global);
goog.exportSymbol('proto.tasks.TzConfig', null, global);
goog.exportSymbol('proto.tasks.Variable', null, global);
goog.exportSymbol('proto.tasks.VariableNamespace', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.TaskValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tasks.TaskValue.oneofGroups_);
};
goog.inherits(proto.tasks.TaskValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.TaskValue.displayName = 'proto.tasks.TaskValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tasks.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.Variable.displayName = 'proto.tasks.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.ParseFieldSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tasks.ParseFieldSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.ParseFieldSpec.displayName = 'proto.tasks.ParseFieldSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.ParseFieldSpecs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tasks.ParseFieldSpecs.repeatedFields_, null);
};
goog.inherits(proto.tasks.ParseFieldSpecs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.ParseFieldSpecs.displayName = 'proto.tasks.ParseFieldSpecs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.ScanUrlFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tasks.ScanUrlFormat.repeatedFields_, proto.tasks.ScanUrlFormat.oneofGroups_);
};
goog.inherits(proto.tasks.ScanUrlFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.ScanUrlFormat.displayName = 'proto.tasks.ScanUrlFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.DataUrlTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tasks.DataUrlTask.oneofGroups_);
};
goog.inherits(proto.tasks.DataUrlTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.DataUrlTask.displayName = 'proto.tasks.DataUrlTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.DataValuesTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tasks.DataValuesTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.DataValuesTask.displayName = 'proto.tasks.DataValuesTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.DataSourceTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tasks.DataSourceTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.DataSourceTask.displayName = 'proto.tasks.DataSourceTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.SignalTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tasks.SignalTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.SignalTask.displayName = 'proto.tasks.SignalTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.TzConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tasks.TzConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.TzConfig.displayName = 'proto.tasks.TzConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tasks.Task.repeatedFields_, proto.tasks.Task.oneofGroups_);
};
goog.inherits(proto.tasks.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.Task.displayName = 'proto.tasks.Task';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.IncomingEdge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tasks.IncomingEdge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.IncomingEdge.displayName = 'proto.tasks.IncomingEdge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.OutgoingEdge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tasks.OutgoingEdge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.OutgoingEdge.displayName = 'proto.tasks.OutgoingEdge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.TaskNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tasks.TaskNode.repeatedFields_, null);
};
goog.inherits(proto.tasks.TaskNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.TaskNode.displayName = 'proto.tasks.TaskNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.TaskGraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tasks.TaskGraph.repeatedFields_, null);
};
goog.inherits(proto.tasks.TaskGraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.TaskGraph.displayName = 'proto.tasks.TaskGraph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.NodeValueIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tasks.NodeValueIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.NodeValueIndex.displayName = 'proto.tasks.NodeValueIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.TaskGraphValueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tasks.TaskGraphValueRequest.repeatedFields_, null);
};
goog.inherits(proto.tasks.TaskGraphValueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.TaskGraphValueRequest.displayName = 'proto.tasks.TaskGraphValueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.ResponseTaskValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tasks.ResponseTaskValue.repeatedFields_, null);
};
goog.inherits(proto.tasks.ResponseTaskValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.ResponseTaskValue.displayName = 'proto.tasks.ResponseTaskValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tasks.TaskGraphValueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tasks.TaskGraphValueResponse.repeatedFields_, null);
};
goog.inherits(proto.tasks.TaskGraphValueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tasks.TaskGraphValueResponse.displayName = 'proto.tasks.TaskGraphValueResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tasks.TaskValue.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.tasks.TaskValue.DataCase = {
  DATA_NOT_SET: 0,
  SCALAR: 1,
  TABLE: 2
};

/**
 * @return {proto.tasks.TaskValue.DataCase}
 */
proto.tasks.TaskValue.prototype.getDataCase = function() {
  return /** @type {proto.tasks.TaskValue.DataCase} */(jspb.Message.computeOneofCase(this, proto.tasks.TaskValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.TaskValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.TaskValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.TaskValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    scalar: msg.getScalar_asB64(),
    table: msg.getTable_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.TaskValue}
 */
proto.tasks.TaskValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.TaskValue;
  return proto.tasks.TaskValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.TaskValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.TaskValue}
 */
proto.tasks.TaskValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScalar(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.TaskValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.TaskValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.TaskValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes scalar = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tasks.TaskValue.prototype.getScalar = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes scalar = 1;
 * This is a type-conversion wrapper around `getScalar()`
 * @return {string}
 */
proto.tasks.TaskValue.prototype.getScalar_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScalar()));
};


/**
 * optional bytes scalar = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScalar()`
 * @return {!Uint8Array}
 */
proto.tasks.TaskValue.prototype.getScalar_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScalar()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tasks.TaskValue} returns this
 */
proto.tasks.TaskValue.prototype.setScalar = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.tasks.TaskValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.TaskValue} returns this
 */
proto.tasks.TaskValue.prototype.clearScalar = function() {
  return jspb.Message.setOneofField(this, 1, proto.tasks.TaskValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.TaskValue.prototype.hasScalar = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes table = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tasks.TaskValue.prototype.getTable = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes table = 2;
 * This is a type-conversion wrapper around `getTable()`
 * @return {string}
 */
proto.tasks.TaskValue.prototype.getTable_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTable()));
};


/**
 * optional bytes table = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTable()`
 * @return {!Uint8Array}
 */
proto.tasks.TaskValue.prototype.getTable_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tasks.TaskValue} returns this
 */
proto.tasks.TaskValue.prototype.setTable = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.tasks.TaskValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.TaskValue} returns this
 */
proto.tasks.TaskValue.prototype.clearTable = function() {
  return jspb.Message.setOneofField(this, 2, proto.tasks.TaskValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.TaskValue.prototype.hasTable = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.Variable}
 */
proto.tasks.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.Variable;
  return proto.tasks.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.Variable}
 */
proto.tasks.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.tasks.VariableNamespace} */ (reader.readEnum());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tasks.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.Variable} returns this
 */
proto.tasks.Variable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional VariableNamespace namespace = 2;
 * @return {!proto.tasks.VariableNamespace}
 */
proto.tasks.Variable.prototype.getNamespace = function() {
  return /** @type {!proto.tasks.VariableNamespace} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tasks.VariableNamespace} value
 * @return {!proto.tasks.Variable} returns this
 */
proto.tasks.Variable.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.ParseFieldSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.ParseFieldSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.ParseFieldSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.ParseFieldSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datatype: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.ParseFieldSpec}
 */
proto.tasks.ParseFieldSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.ParseFieldSpec;
  return proto.tasks.ParseFieldSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.ParseFieldSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.ParseFieldSpec}
 */
proto.tasks.ParseFieldSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatatype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.ParseFieldSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.ParseFieldSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.ParseFieldSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.ParseFieldSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatatype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tasks.ParseFieldSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.ParseFieldSpec} returns this
 */
proto.tasks.ParseFieldSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string datatype = 2;
 * @return {string}
 */
proto.tasks.ParseFieldSpec.prototype.getDatatype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.ParseFieldSpec} returns this
 */
proto.tasks.ParseFieldSpec.prototype.setDatatype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tasks.ParseFieldSpecs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.ParseFieldSpecs.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.ParseFieldSpecs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.ParseFieldSpecs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.ParseFieldSpecs.toObject = function(includeInstance, msg) {
  var f, obj = {
    specsList: jspb.Message.toObjectList(msg.getSpecsList(),
    proto.tasks.ParseFieldSpec.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.ParseFieldSpecs}
 */
proto.tasks.ParseFieldSpecs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.ParseFieldSpecs;
  return proto.tasks.ParseFieldSpecs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.ParseFieldSpecs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.ParseFieldSpecs}
 */
proto.tasks.ParseFieldSpecs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tasks.ParseFieldSpec;
      reader.readMessage(value,proto.tasks.ParseFieldSpec.deserializeBinaryFromReader);
      msg.addSpecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.ParseFieldSpecs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.ParseFieldSpecs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.ParseFieldSpecs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.ParseFieldSpecs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tasks.ParseFieldSpec.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ParseFieldSpec specs = 1;
 * @return {!Array<!proto.tasks.ParseFieldSpec>}
 */
proto.tasks.ParseFieldSpecs.prototype.getSpecsList = function() {
  return /** @type{!Array<!proto.tasks.ParseFieldSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tasks.ParseFieldSpec, 1));
};


/**
 * @param {!Array<!proto.tasks.ParseFieldSpec>} value
 * @return {!proto.tasks.ParseFieldSpecs} returns this
*/
proto.tasks.ParseFieldSpecs.prototype.setSpecsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tasks.ParseFieldSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.ParseFieldSpec}
 */
proto.tasks.ParseFieldSpecs.prototype.addSpecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tasks.ParseFieldSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tasks.ParseFieldSpecs} returns this
 */
proto.tasks.ParseFieldSpecs.prototype.clearSpecsList = function() {
  return this.setSpecsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tasks.ScanUrlFormat.repeatedFields_ = [5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tasks.ScanUrlFormat.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.tasks.ScanUrlFormat.ParseCase = {
  PARSE_NOT_SET: 0,
  STRING: 2,
  OBJECT: 3
};

/**
 * @return {proto.tasks.ScanUrlFormat.ParseCase}
 */
proto.tasks.ScanUrlFormat.prototype.getParseCase = function() {
  return /** @type {proto.tasks.ScanUrlFormat.ParseCase} */(jspb.Message.computeOneofCase(this, proto.tasks.ScanUrlFormat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.ScanUrlFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.ScanUrlFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.ScanUrlFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.ScanUrlFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    string: jspb.Message.getFieldWithDefault(msg, 2, ""),
    object: (f = msg.getObject()) && proto.tasks.ParseFieldSpecs.toObject(includeInstance, f),
    property: jspb.Message.getFieldWithDefault(msg, 4, ""),
    headerList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    delimiter: jspb.Message.getFieldWithDefault(msg, 6, ""),
    feature: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.ScanUrlFormat}
 */
proto.tasks.ScanUrlFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.ScanUrlFormat;
  return proto.tasks.ScanUrlFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.ScanUrlFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.ScanUrlFormat}
 */
proto.tasks.ScanUrlFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 3:
      var value = new proto.tasks.ParseFieldSpecs;
      reader.readMessage(value,proto.tasks.ParseFieldSpecs.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProperty(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addHeader(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelimiter(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.ScanUrlFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.ScanUrlFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.ScanUrlFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.ScanUrlFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tasks.ParseFieldSpecs.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHeaderList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.tasks.ScanUrlFormat.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.ScanUrlFormat.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string string = 2;
 * @return {string}
 */
proto.tasks.ScanUrlFormat.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.tasks.ScanUrlFormat.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 2, proto.tasks.ScanUrlFormat.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.ScanUrlFormat.prototype.hasString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ParseFieldSpecs object = 3;
 * @return {?proto.tasks.ParseFieldSpecs}
 */
proto.tasks.ScanUrlFormat.prototype.getObject = function() {
  return /** @type{?proto.tasks.ParseFieldSpecs} */ (
    jspb.Message.getWrapperField(this, proto.tasks.ParseFieldSpecs, 3));
};


/**
 * @param {?proto.tasks.ParseFieldSpecs|undefined} value
 * @return {!proto.tasks.ScanUrlFormat} returns this
*/
proto.tasks.ScanUrlFormat.prototype.setObject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.tasks.ScanUrlFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.ScanUrlFormat.prototype.hasObject = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string property = 4;
 * @return {string}
 */
proto.tasks.ScanUrlFormat.prototype.getProperty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.setProperty = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.clearProperty = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.ScanUrlFormat.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string header = 5;
 * @return {!Array<string>}
 */
proto.tasks.ScanUrlFormat.prototype.getHeaderList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.setHeaderList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.addHeader = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.clearHeaderList = function() {
  return this.setHeaderList([]);
};


/**
 * optional string delimiter = 6;
 * @return {string}
 */
proto.tasks.ScanUrlFormat.prototype.getDelimiter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.setDelimiter = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.clearDelimiter = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.ScanUrlFormat.prototype.hasDelimiter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string feature = 7;
 * @return {string}
 */
proto.tasks.ScanUrlFormat.prototype.getFeature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.setFeature = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.ScanUrlFormat} returns this
 */
proto.tasks.ScanUrlFormat.prototype.clearFeature = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.ScanUrlFormat.prototype.hasFeature = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tasks.DataUrlTask.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.tasks.DataUrlTask.UrlCase = {
  URL_NOT_SET: 0,
  STRING: 1,
  EXPR: 2
};

/**
 * @return {proto.tasks.DataUrlTask.UrlCase}
 */
proto.tasks.DataUrlTask.prototype.getUrlCase = function() {
  return /** @type {proto.tasks.DataUrlTask.UrlCase} */(jspb.Message.computeOneofCase(this, proto.tasks.DataUrlTask.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.DataUrlTask.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.DataUrlTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.DataUrlTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.DataUrlTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    string: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expr: (f = msg.getExpr()) && expression_pb.Expression.toObject(includeInstance, f),
    batchSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    formatType: (f = msg.getFormatType()) && proto.tasks.ScanUrlFormat.toObject(includeInstance, f),
    pipeline: (f = msg.getPipeline()) && transforms_pb.TransformPipeline.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.DataUrlTask}
 */
proto.tasks.DataUrlTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.DataUrlTask;
  return proto.tasks.DataUrlTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.DataUrlTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.DataUrlTask}
 */
proto.tasks.DataUrlTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 2:
      var value = new expression_pb.Expression;
      reader.readMessage(value,expression_pb.Expression.deserializeBinaryFromReader);
      msg.setExpr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatchSize(value);
      break;
    case 4:
      var value = new proto.tasks.ScanUrlFormat;
      reader.readMessage(value,proto.tasks.ScanUrlFormat.deserializeBinaryFromReader);
      msg.setFormatType(value);
      break;
    case 5:
      var value = new transforms_pb.TransformPipeline;
      reader.readMessage(value,transforms_pb.TransformPipeline.deserializeBinaryFromReader);
      msg.setPipeline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.DataUrlTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.DataUrlTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.DataUrlTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.DataUrlTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      expression_pb.Expression.serializeBinaryToWriter
    );
  }
  f = message.getBatchSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFormatType();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tasks.ScanUrlFormat.serializeBinaryToWriter
    );
  }
  f = message.getPipeline();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      transforms_pb.TransformPipeline.serializeBinaryToWriter
    );
  }
};


/**
 * optional string string = 1;
 * @return {string}
 */
proto.tasks.DataUrlTask.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.DataUrlTask} returns this
 */
proto.tasks.DataUrlTask.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.tasks.DataUrlTask.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.DataUrlTask} returns this
 */
proto.tasks.DataUrlTask.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 1, proto.tasks.DataUrlTask.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.DataUrlTask.prototype.hasString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional expression.Expression expr = 2;
 * @return {?proto.expression.Expression}
 */
proto.tasks.DataUrlTask.prototype.getExpr = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, expression_pb.Expression, 2));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.tasks.DataUrlTask} returns this
*/
proto.tasks.DataUrlTask.prototype.setExpr = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tasks.DataUrlTask.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.DataUrlTask} returns this
 */
proto.tasks.DataUrlTask.prototype.clearExpr = function() {
  return this.setExpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.DataUrlTask.prototype.hasExpr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 batch_size = 3;
 * @return {number}
 */
proto.tasks.DataUrlTask.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tasks.DataUrlTask} returns this
 */
proto.tasks.DataUrlTask.prototype.setBatchSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ScanUrlFormat format_type = 4;
 * @return {?proto.tasks.ScanUrlFormat}
 */
proto.tasks.DataUrlTask.prototype.getFormatType = function() {
  return /** @type{?proto.tasks.ScanUrlFormat} */ (
    jspb.Message.getWrapperField(this, proto.tasks.ScanUrlFormat, 4));
};


/**
 * @param {?proto.tasks.ScanUrlFormat|undefined} value
 * @return {!proto.tasks.DataUrlTask} returns this
*/
proto.tasks.DataUrlTask.prototype.setFormatType = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.DataUrlTask} returns this
 */
proto.tasks.DataUrlTask.prototype.clearFormatType = function() {
  return this.setFormatType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.DataUrlTask.prototype.hasFormatType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional transforms.TransformPipeline pipeline = 5;
 * @return {?proto.transforms.TransformPipeline}
 */
proto.tasks.DataUrlTask.prototype.getPipeline = function() {
  return /** @type{?proto.transforms.TransformPipeline} */ (
    jspb.Message.getWrapperField(this, transforms_pb.TransformPipeline, 5));
};


/**
 * @param {?proto.transforms.TransformPipeline|undefined} value
 * @return {!proto.tasks.DataUrlTask} returns this
*/
proto.tasks.DataUrlTask.prototype.setPipeline = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.DataUrlTask} returns this
 */
proto.tasks.DataUrlTask.prototype.clearPipeline = function() {
  return this.setPipeline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.DataUrlTask.prototype.hasPipeline = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.DataValuesTask.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.DataValuesTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.DataValuesTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.DataValuesTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    values: msg.getValues_asB64(),
    formatType: (f = msg.getFormatType()) && proto.tasks.ScanUrlFormat.toObject(includeInstance, f),
    pipeline: (f = msg.getPipeline()) && transforms_pb.TransformPipeline.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.DataValuesTask}
 */
proto.tasks.DataValuesTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.DataValuesTask;
  return proto.tasks.DataValuesTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.DataValuesTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.DataValuesTask}
 */
proto.tasks.DataValuesTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValues(value);
      break;
    case 2:
      var value = new proto.tasks.ScanUrlFormat;
      reader.readMessage(value,proto.tasks.ScanUrlFormat.deserializeBinaryFromReader);
      msg.setFormatType(value);
      break;
    case 3:
      var value = new transforms_pb.TransformPipeline;
      reader.readMessage(value,transforms_pb.TransformPipeline.deserializeBinaryFromReader);
      msg.setPipeline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.DataValuesTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.DataValuesTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.DataValuesTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.DataValuesTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValues_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFormatType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tasks.ScanUrlFormat.serializeBinaryToWriter
    );
  }
  f = message.getPipeline();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      transforms_pb.TransformPipeline.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes values = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tasks.DataValuesTask.prototype.getValues = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes values = 1;
 * This is a type-conversion wrapper around `getValues()`
 * @return {string}
 */
proto.tasks.DataValuesTask.prototype.getValues_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValues()));
};


/**
 * optional bytes values = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValues()`
 * @return {!Uint8Array}
 */
proto.tasks.DataValuesTask.prototype.getValues_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValues()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tasks.DataValuesTask} returns this
 */
proto.tasks.DataValuesTask.prototype.setValues = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ScanUrlFormat format_type = 2;
 * @return {?proto.tasks.ScanUrlFormat}
 */
proto.tasks.DataValuesTask.prototype.getFormatType = function() {
  return /** @type{?proto.tasks.ScanUrlFormat} */ (
    jspb.Message.getWrapperField(this, proto.tasks.ScanUrlFormat, 2));
};


/**
 * @param {?proto.tasks.ScanUrlFormat|undefined} value
 * @return {!proto.tasks.DataValuesTask} returns this
*/
proto.tasks.DataValuesTask.prototype.setFormatType = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.DataValuesTask} returns this
 */
proto.tasks.DataValuesTask.prototype.clearFormatType = function() {
  return this.setFormatType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.DataValuesTask.prototype.hasFormatType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional transforms.TransformPipeline pipeline = 3;
 * @return {?proto.transforms.TransformPipeline}
 */
proto.tasks.DataValuesTask.prototype.getPipeline = function() {
  return /** @type{?proto.transforms.TransformPipeline} */ (
    jspb.Message.getWrapperField(this, transforms_pb.TransformPipeline, 3));
};


/**
 * @param {?proto.transforms.TransformPipeline|undefined} value
 * @return {!proto.tasks.DataValuesTask} returns this
*/
proto.tasks.DataValuesTask.prototype.setPipeline = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.DataValuesTask} returns this
 */
proto.tasks.DataValuesTask.prototype.clearPipeline = function() {
  return this.setPipeline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.DataValuesTask.prototype.hasPipeline = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.DataSourceTask.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.DataSourceTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.DataSourceTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.DataSourceTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pipeline: (f = msg.getPipeline()) && transforms_pb.TransformPipeline.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.DataSourceTask}
 */
proto.tasks.DataSourceTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.DataSourceTask;
  return proto.tasks.DataSourceTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.DataSourceTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.DataSourceTask}
 */
proto.tasks.DataSourceTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = new transforms_pb.TransformPipeline;
      reader.readMessage(value,transforms_pb.TransformPipeline.deserializeBinaryFromReader);
      msg.setPipeline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.DataSourceTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.DataSourceTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.DataSourceTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.DataSourceTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPipeline();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      transforms_pb.TransformPipeline.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.tasks.DataSourceTask.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.DataSourceTask} returns this
 */
proto.tasks.DataSourceTask.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional transforms.TransformPipeline pipeline = 2;
 * @return {?proto.transforms.TransformPipeline}
 */
proto.tasks.DataSourceTask.prototype.getPipeline = function() {
  return /** @type{?proto.transforms.TransformPipeline} */ (
    jspb.Message.getWrapperField(this, transforms_pb.TransformPipeline, 2));
};


/**
 * @param {?proto.transforms.TransformPipeline|undefined} value
 * @return {!proto.tasks.DataSourceTask} returns this
*/
proto.tasks.DataSourceTask.prototype.setPipeline = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.DataSourceTask} returns this
 */
proto.tasks.DataSourceTask.prototype.clearPipeline = function() {
  return this.setPipeline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.DataSourceTask.prototype.hasPipeline = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.SignalTask.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.SignalTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.SignalTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.SignalTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    expr: (f = msg.getExpr()) && expression_pb.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.SignalTask}
 */
proto.tasks.SignalTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.SignalTask;
  return proto.tasks.SignalTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.SignalTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.SignalTask}
 */
proto.tasks.SignalTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new expression_pb.Expression;
      reader.readMessage(value,expression_pb.Expression.deserializeBinaryFromReader);
      msg.setExpr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.SignalTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.SignalTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.SignalTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.SignalTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      expression_pb.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional expression.Expression expr = 2;
 * @return {?proto.expression.Expression}
 */
proto.tasks.SignalTask.prototype.getExpr = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, expression_pb.Expression, 2));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.tasks.SignalTask} returns this
*/
proto.tasks.SignalTask.prototype.setExpr = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.SignalTask} returns this
 */
proto.tasks.SignalTask.prototype.clearExpr = function() {
  return this.setExpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.SignalTask.prototype.hasExpr = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.TzConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.TzConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.TzConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TzConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    localTz: jspb.Message.getFieldWithDefault(msg, 1, ""),
    defaultInputTz: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.TzConfig}
 */
proto.tasks.TzConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.TzConfig;
  return proto.tasks.TzConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.TzConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.TzConfig}
 */
proto.tasks.TzConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalTz(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultInputTz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.TzConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.TzConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.TzConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TzConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalTz();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string local_tz = 1;
 * @return {string}
 */
proto.tasks.TzConfig.prototype.getLocalTz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.TzConfig} returns this
 */
proto.tasks.TzConfig.prototype.setLocalTz = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string default_input_tz = 2;
 * @return {string}
 */
proto.tasks.TzConfig.prototype.getDefaultInputTz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tasks.TzConfig} returns this
 */
proto.tasks.TzConfig.prototype.setDefaultInputTz = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.TzConfig} returns this
 */
proto.tasks.TzConfig.prototype.clearDefaultInputTz = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.TzConfig.prototype.hasDefaultInputTz = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tasks.Task.repeatedFields_ = [2];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tasks.Task.oneofGroups_ = [[3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.tasks.Task.TaskKindCase = {
  TASK_KIND_NOT_SET: 0,
  VALUE: 3,
  DATA_VALUES: 4,
  DATA_URL: 5,
  DATA_SOURCE: 6,
  SIGNAL: 7
};

/**
 * @return {proto.tasks.Task.TaskKindCase}
 */
proto.tasks.Task.prototype.getTaskKindCase = function() {
  return /** @type {proto.tasks.Task.TaskKindCase} */(jspb.Message.computeOneofCase(this, proto.tasks.Task.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    variable: (f = msg.getVariable()) && proto.tasks.Variable.toObject(includeInstance, f),
    scopeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    value: (f = msg.getValue()) && proto.tasks.TaskValue.toObject(includeInstance, f),
    dataValues: (f = msg.getDataValues()) && proto.tasks.DataValuesTask.toObject(includeInstance, f),
    dataUrl: (f = msg.getDataUrl()) && proto.tasks.DataUrlTask.toObject(includeInstance, f),
    dataSource: (f = msg.getDataSource()) && proto.tasks.DataSourceTask.toObject(includeInstance, f),
    signal: (f = msg.getSignal()) && proto.tasks.SignalTask.toObject(includeInstance, f),
    tzConfig: (f = msg.getTzConfig()) && proto.tasks.TzConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.Task}
 */
proto.tasks.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.Task;
  return proto.tasks.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.Task}
 */
proto.tasks.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tasks.Variable;
      reader.readMessage(value,proto.tasks.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addScope(values[i]);
      }
      break;
    case 3:
      var value = new proto.tasks.TaskValue;
      reader.readMessage(value,proto.tasks.TaskValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.tasks.DataValuesTask;
      reader.readMessage(value,proto.tasks.DataValuesTask.deserializeBinaryFromReader);
      msg.setDataValues(value);
      break;
    case 5:
      var value = new proto.tasks.DataUrlTask;
      reader.readMessage(value,proto.tasks.DataUrlTask.deserializeBinaryFromReader);
      msg.setDataUrl(value);
      break;
    case 6:
      var value = new proto.tasks.DataSourceTask;
      reader.readMessage(value,proto.tasks.DataSourceTask.deserializeBinaryFromReader);
      msg.setDataSource(value);
      break;
    case 7:
      var value = new proto.tasks.SignalTask;
      reader.readMessage(value,proto.tasks.SignalTask.deserializeBinaryFromReader);
      msg.setSignal(value);
      break;
    case 8:
      var value = new proto.tasks.TzConfig;
      reader.readMessage(value,proto.tasks.TzConfig.deserializeBinaryFromReader);
      msg.setTzConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tasks.Variable.serializeBinaryToWriter
    );
  }
  f = message.getScopeList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tasks.TaskValue.serializeBinaryToWriter
    );
  }
  f = message.getDataValues();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tasks.DataValuesTask.serializeBinaryToWriter
    );
  }
  f = message.getDataUrl();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tasks.DataUrlTask.serializeBinaryToWriter
    );
  }
  f = message.getDataSource();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.tasks.DataSourceTask.serializeBinaryToWriter
    );
  }
  f = message.getSignal();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.tasks.SignalTask.serializeBinaryToWriter
    );
  }
  f = message.getTzConfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.tasks.TzConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable variable = 1;
 * @return {?proto.tasks.Variable}
 */
proto.tasks.Task.prototype.getVariable = function() {
  return /** @type{?proto.tasks.Variable} */ (
    jspb.Message.getWrapperField(this, proto.tasks.Variable, 1));
};


/**
 * @param {?proto.tasks.Variable|undefined} value
 * @return {!proto.tasks.Task} returns this
*/
proto.tasks.Task.prototype.setVariable = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.clearVariable = function() {
  return this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.Task.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 scope = 2;
 * @return {!Array<number>}
 */
proto.tasks.Task.prototype.getScopeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.setScopeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.addScope = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.clearScopeList = function() {
  return this.setScopeList([]);
};


/**
 * optional TaskValue value = 3;
 * @return {?proto.tasks.TaskValue}
 */
proto.tasks.Task.prototype.getValue = function() {
  return /** @type{?proto.tasks.TaskValue} */ (
    jspb.Message.getWrapperField(this, proto.tasks.TaskValue, 3));
};


/**
 * @param {?proto.tasks.TaskValue|undefined} value
 * @return {!proto.tasks.Task} returns this
*/
proto.tasks.Task.prototype.setValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.tasks.Task.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.Task.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataValuesTask data_values = 4;
 * @return {?proto.tasks.DataValuesTask}
 */
proto.tasks.Task.prototype.getDataValues = function() {
  return /** @type{?proto.tasks.DataValuesTask} */ (
    jspb.Message.getWrapperField(this, proto.tasks.DataValuesTask, 4));
};


/**
 * @param {?proto.tasks.DataValuesTask|undefined} value
 * @return {!proto.tasks.Task} returns this
*/
proto.tasks.Task.prototype.setDataValues = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.tasks.Task.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.clearDataValues = function() {
  return this.setDataValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.Task.prototype.hasDataValues = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DataUrlTask data_url = 5;
 * @return {?proto.tasks.DataUrlTask}
 */
proto.tasks.Task.prototype.getDataUrl = function() {
  return /** @type{?proto.tasks.DataUrlTask} */ (
    jspb.Message.getWrapperField(this, proto.tasks.DataUrlTask, 5));
};


/**
 * @param {?proto.tasks.DataUrlTask|undefined} value
 * @return {!proto.tasks.Task} returns this
*/
proto.tasks.Task.prototype.setDataUrl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.tasks.Task.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.clearDataUrl = function() {
  return this.setDataUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.Task.prototype.hasDataUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DataSourceTask data_source = 6;
 * @return {?proto.tasks.DataSourceTask}
 */
proto.tasks.Task.prototype.getDataSource = function() {
  return /** @type{?proto.tasks.DataSourceTask} */ (
    jspb.Message.getWrapperField(this, proto.tasks.DataSourceTask, 6));
};


/**
 * @param {?proto.tasks.DataSourceTask|undefined} value
 * @return {!proto.tasks.Task} returns this
*/
proto.tasks.Task.prototype.setDataSource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.tasks.Task.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.clearDataSource = function() {
  return this.setDataSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.Task.prototype.hasDataSource = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SignalTask signal = 7;
 * @return {?proto.tasks.SignalTask}
 */
proto.tasks.Task.prototype.getSignal = function() {
  return /** @type{?proto.tasks.SignalTask} */ (
    jspb.Message.getWrapperField(this, proto.tasks.SignalTask, 7));
};


/**
 * @param {?proto.tasks.SignalTask|undefined} value
 * @return {!proto.tasks.Task} returns this
*/
proto.tasks.Task.prototype.setSignal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.tasks.Task.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.clearSignal = function() {
  return this.setSignal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.Task.prototype.hasSignal = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TzConfig tz_config = 8;
 * @return {?proto.tasks.TzConfig}
 */
proto.tasks.Task.prototype.getTzConfig = function() {
  return /** @type{?proto.tasks.TzConfig} */ (
    jspb.Message.getWrapperField(this, proto.tasks.TzConfig, 8));
};


/**
 * @param {?proto.tasks.TzConfig|undefined} value
 * @return {!proto.tasks.Task} returns this
*/
proto.tasks.Task.prototype.setTzConfig = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.Task} returns this
 */
proto.tasks.Task.prototype.clearTzConfig = function() {
  return this.setTzConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.Task.prototype.hasTzConfig = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.IncomingEdge.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.IncomingEdge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.IncomingEdge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.IncomingEdge.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, 0),
    output: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.IncomingEdge}
 */
proto.tasks.IncomingEdge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.IncomingEdge;
  return proto.tasks.IncomingEdge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.IncomingEdge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.IncomingEdge}
 */
proto.tasks.IncomingEdge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.IncomingEdge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.IncomingEdge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.IncomingEdge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.IncomingEdge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 source = 1;
 * @return {number}
 */
proto.tasks.IncomingEdge.prototype.getSource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tasks.IncomingEdge} returns this
 */
proto.tasks.IncomingEdge.prototype.setSource = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 output = 2;
 * @return {number}
 */
proto.tasks.IncomingEdge.prototype.getOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tasks.IncomingEdge} returns this
 */
proto.tasks.IncomingEdge.prototype.setOutput = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.IncomingEdge} returns this
 */
proto.tasks.IncomingEdge.prototype.clearOutput = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.IncomingEdge.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.OutgoingEdge.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.OutgoingEdge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.OutgoingEdge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.OutgoingEdge.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    propagate: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.OutgoingEdge}
 */
proto.tasks.OutgoingEdge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.OutgoingEdge;
  return proto.tasks.OutgoingEdge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.OutgoingEdge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.OutgoingEdge}
 */
proto.tasks.OutgoingEdge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPropagate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.OutgoingEdge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.OutgoingEdge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.OutgoingEdge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.OutgoingEdge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPropagate();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint32 target = 1;
 * @return {number}
 */
proto.tasks.OutgoingEdge.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tasks.OutgoingEdge} returns this
 */
proto.tasks.OutgoingEdge.prototype.setTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool propagate = 2;
 * @return {boolean}
 */
proto.tasks.OutgoingEdge.prototype.getPropagate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tasks.OutgoingEdge} returns this
 */
proto.tasks.OutgoingEdge.prototype.setPropagate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tasks.TaskNode.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.TaskNode.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.TaskNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.TaskNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    task: (f = msg.getTask()) && proto.tasks.Task.toObject(includeInstance, f),
    incomingList: jspb.Message.toObjectList(msg.getIncomingList(),
    proto.tasks.IncomingEdge.toObject, includeInstance),
    outgoingList: jspb.Message.toObjectList(msg.getOutgoingList(),
    proto.tasks.OutgoingEdge.toObject, includeInstance),
    idFingerprint: jspb.Message.getFieldWithDefault(msg, 4, 0),
    stateFingerprint: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.TaskNode}
 */
proto.tasks.TaskNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.TaskNode;
  return proto.tasks.TaskNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.TaskNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.TaskNode}
 */
proto.tasks.TaskNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tasks.Task;
      reader.readMessage(value,proto.tasks.Task.deserializeBinaryFromReader);
      msg.setTask(value);
      break;
    case 2:
      var value = new proto.tasks.IncomingEdge;
      reader.readMessage(value,proto.tasks.IncomingEdge.deserializeBinaryFromReader);
      msg.addIncoming(value);
      break;
    case 3:
      var value = new proto.tasks.OutgoingEdge;
      reader.readMessage(value,proto.tasks.OutgoingEdge.deserializeBinaryFromReader);
      msg.addOutgoing(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdFingerprint(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStateFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.TaskNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.TaskNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.TaskNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tasks.Task.serializeBinaryToWriter
    );
  }
  f = message.getIncomingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tasks.IncomingEdge.serializeBinaryToWriter
    );
  }
  f = message.getOutgoingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tasks.OutgoingEdge.serializeBinaryToWriter
    );
  }
  f = message.getIdFingerprint();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getStateFingerprint();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional Task task = 1;
 * @return {?proto.tasks.Task}
 */
proto.tasks.TaskNode.prototype.getTask = function() {
  return /** @type{?proto.tasks.Task} */ (
    jspb.Message.getWrapperField(this, proto.tasks.Task, 1));
};


/**
 * @param {?proto.tasks.Task|undefined} value
 * @return {!proto.tasks.TaskNode} returns this
*/
proto.tasks.TaskNode.prototype.setTask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.TaskNode} returns this
 */
proto.tasks.TaskNode.prototype.clearTask = function() {
  return this.setTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.TaskNode.prototype.hasTask = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated IncomingEdge incoming = 2;
 * @return {!Array<!proto.tasks.IncomingEdge>}
 */
proto.tasks.TaskNode.prototype.getIncomingList = function() {
  return /** @type{!Array<!proto.tasks.IncomingEdge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tasks.IncomingEdge, 2));
};


/**
 * @param {!Array<!proto.tasks.IncomingEdge>} value
 * @return {!proto.tasks.TaskNode} returns this
*/
proto.tasks.TaskNode.prototype.setIncomingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tasks.IncomingEdge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.IncomingEdge}
 */
proto.tasks.TaskNode.prototype.addIncoming = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tasks.IncomingEdge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tasks.TaskNode} returns this
 */
proto.tasks.TaskNode.prototype.clearIncomingList = function() {
  return this.setIncomingList([]);
};


/**
 * repeated OutgoingEdge outgoing = 3;
 * @return {!Array<!proto.tasks.OutgoingEdge>}
 */
proto.tasks.TaskNode.prototype.getOutgoingList = function() {
  return /** @type{!Array<!proto.tasks.OutgoingEdge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tasks.OutgoingEdge, 3));
};


/**
 * @param {!Array<!proto.tasks.OutgoingEdge>} value
 * @return {!proto.tasks.TaskNode} returns this
*/
proto.tasks.TaskNode.prototype.setOutgoingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tasks.OutgoingEdge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.OutgoingEdge}
 */
proto.tasks.TaskNode.prototype.addOutgoing = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tasks.OutgoingEdge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tasks.TaskNode} returns this
 */
proto.tasks.TaskNode.prototype.clearOutgoingList = function() {
  return this.setOutgoingList([]);
};


/**
 * optional uint64 id_fingerprint = 4;
 * @return {number}
 */
proto.tasks.TaskNode.prototype.getIdFingerprint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tasks.TaskNode} returns this
 */
proto.tasks.TaskNode.prototype.setIdFingerprint = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 state_fingerprint = 5;
 * @return {number}
 */
proto.tasks.TaskNode.prototype.getStateFingerprint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tasks.TaskNode} returns this
 */
proto.tasks.TaskNode.prototype.setStateFingerprint = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tasks.TaskGraph.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.TaskGraph.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.TaskGraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.TaskGraph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskGraph.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.tasks.TaskNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.TaskGraph}
 */
proto.tasks.TaskGraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.TaskGraph;
  return proto.tasks.TaskGraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.TaskGraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.TaskGraph}
 */
proto.tasks.TaskGraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tasks.TaskNode;
      reader.readMessage(value,proto.tasks.TaskNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.TaskGraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.TaskGraph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.TaskGraph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskGraph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tasks.TaskNode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TaskNode nodes = 1;
 * @return {!Array<!proto.tasks.TaskNode>}
 */
proto.tasks.TaskGraph.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.tasks.TaskNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tasks.TaskNode, 1));
};


/**
 * @param {!Array<!proto.tasks.TaskNode>} value
 * @return {!proto.tasks.TaskGraph} returns this
*/
proto.tasks.TaskGraph.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tasks.TaskNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.TaskNode}
 */
proto.tasks.TaskGraph.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tasks.TaskNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tasks.TaskGraph} returns this
 */
proto.tasks.TaskGraph.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.NodeValueIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.NodeValueIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.NodeValueIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.NodeValueIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    outputIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.NodeValueIndex}
 */
proto.tasks.NodeValueIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.NodeValueIndex;
  return proto.tasks.NodeValueIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.NodeValueIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.NodeValueIndex}
 */
proto.tasks.NodeValueIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNodeIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutputIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.NodeValueIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.NodeValueIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.NodeValueIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.NodeValueIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 node_index = 1;
 * @return {number}
 */
proto.tasks.NodeValueIndex.prototype.getNodeIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tasks.NodeValueIndex} returns this
 */
proto.tasks.NodeValueIndex.prototype.setNodeIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 output_index = 2;
 * @return {number}
 */
proto.tasks.NodeValueIndex.prototype.getOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tasks.NodeValueIndex} returns this
 */
proto.tasks.NodeValueIndex.prototype.setOutputIndex = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tasks.NodeValueIndex} returns this
 */
proto.tasks.NodeValueIndex.prototype.clearOutputIndex = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.NodeValueIndex.prototype.hasOutputIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tasks.TaskGraphValueRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.TaskGraphValueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.TaskGraphValueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.TaskGraphValueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskGraphValueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskGraph: (f = msg.getTaskGraph()) && proto.tasks.TaskGraph.toObject(includeInstance, f),
    indicesList: jspb.Message.toObjectList(msg.getIndicesList(),
    proto.tasks.NodeValueIndex.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.TaskGraphValueRequest}
 */
proto.tasks.TaskGraphValueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.TaskGraphValueRequest;
  return proto.tasks.TaskGraphValueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.TaskGraphValueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.TaskGraphValueRequest}
 */
proto.tasks.TaskGraphValueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tasks.TaskGraph;
      reader.readMessage(value,proto.tasks.TaskGraph.deserializeBinaryFromReader);
      msg.setTaskGraph(value);
      break;
    case 2:
      var value = new proto.tasks.NodeValueIndex;
      reader.readMessage(value,proto.tasks.NodeValueIndex.deserializeBinaryFromReader);
      msg.addIndices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.TaskGraphValueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.TaskGraphValueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.TaskGraphValueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskGraphValueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskGraph();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tasks.TaskGraph.serializeBinaryToWriter
    );
  }
  f = message.getIndicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tasks.NodeValueIndex.serializeBinaryToWriter
    );
  }
};


/**
 * optional TaskGraph task_graph = 1;
 * @return {?proto.tasks.TaskGraph}
 */
proto.tasks.TaskGraphValueRequest.prototype.getTaskGraph = function() {
  return /** @type{?proto.tasks.TaskGraph} */ (
    jspb.Message.getWrapperField(this, proto.tasks.TaskGraph, 1));
};


/**
 * @param {?proto.tasks.TaskGraph|undefined} value
 * @return {!proto.tasks.TaskGraphValueRequest} returns this
*/
proto.tasks.TaskGraphValueRequest.prototype.setTaskGraph = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.TaskGraphValueRequest} returns this
 */
proto.tasks.TaskGraphValueRequest.prototype.clearTaskGraph = function() {
  return this.setTaskGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.TaskGraphValueRequest.prototype.hasTaskGraph = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated NodeValueIndex indices = 2;
 * @return {!Array<!proto.tasks.NodeValueIndex>}
 */
proto.tasks.TaskGraphValueRequest.prototype.getIndicesList = function() {
  return /** @type{!Array<!proto.tasks.NodeValueIndex>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tasks.NodeValueIndex, 2));
};


/**
 * @param {!Array<!proto.tasks.NodeValueIndex>} value
 * @return {!proto.tasks.TaskGraphValueRequest} returns this
*/
proto.tasks.TaskGraphValueRequest.prototype.setIndicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tasks.NodeValueIndex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.NodeValueIndex}
 */
proto.tasks.TaskGraphValueRequest.prototype.addIndices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tasks.NodeValueIndex, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tasks.TaskGraphValueRequest} returns this
 */
proto.tasks.TaskGraphValueRequest.prototype.clearIndicesList = function() {
  return this.setIndicesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tasks.ResponseTaskValue.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.ResponseTaskValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.ResponseTaskValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.ResponseTaskValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.ResponseTaskValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    variable: (f = msg.getVariable()) && proto.tasks.Variable.toObject(includeInstance, f),
    scopeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    value: (f = msg.getValue()) && proto.tasks.TaskValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.ResponseTaskValue}
 */
proto.tasks.ResponseTaskValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.ResponseTaskValue;
  return proto.tasks.ResponseTaskValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.ResponseTaskValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.ResponseTaskValue}
 */
proto.tasks.ResponseTaskValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tasks.Variable;
      reader.readMessage(value,proto.tasks.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addScope(values[i]);
      }
      break;
    case 3:
      var value = new proto.tasks.TaskValue;
      reader.readMessage(value,proto.tasks.TaskValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.ResponseTaskValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.ResponseTaskValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.ResponseTaskValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.ResponseTaskValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tasks.Variable.serializeBinaryToWriter
    );
  }
  f = message.getScopeList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tasks.TaskValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable variable = 1;
 * @return {?proto.tasks.Variable}
 */
proto.tasks.ResponseTaskValue.prototype.getVariable = function() {
  return /** @type{?proto.tasks.Variable} */ (
    jspb.Message.getWrapperField(this, proto.tasks.Variable, 1));
};


/**
 * @param {?proto.tasks.Variable|undefined} value
 * @return {!proto.tasks.ResponseTaskValue} returns this
*/
proto.tasks.ResponseTaskValue.prototype.setVariable = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.ResponseTaskValue} returns this
 */
proto.tasks.ResponseTaskValue.prototype.clearVariable = function() {
  return this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.ResponseTaskValue.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 scope = 2;
 * @return {!Array<number>}
 */
proto.tasks.ResponseTaskValue.prototype.getScopeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tasks.ResponseTaskValue} returns this
 */
proto.tasks.ResponseTaskValue.prototype.setScopeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tasks.ResponseTaskValue} returns this
 */
proto.tasks.ResponseTaskValue.prototype.addScope = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tasks.ResponseTaskValue} returns this
 */
proto.tasks.ResponseTaskValue.prototype.clearScopeList = function() {
  return this.setScopeList([]);
};


/**
 * optional TaskValue value = 3;
 * @return {?proto.tasks.TaskValue}
 */
proto.tasks.ResponseTaskValue.prototype.getValue = function() {
  return /** @type{?proto.tasks.TaskValue} */ (
    jspb.Message.getWrapperField(this, proto.tasks.TaskValue, 3));
};


/**
 * @param {?proto.tasks.TaskValue|undefined} value
 * @return {!proto.tasks.ResponseTaskValue} returns this
*/
proto.tasks.ResponseTaskValue.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tasks.ResponseTaskValue} returns this
 */
proto.tasks.ResponseTaskValue.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tasks.ResponseTaskValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tasks.TaskGraphValueResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tasks.TaskGraphValueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tasks.TaskGraphValueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tasks.TaskGraphValueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskGraphValueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseValuesList: jspb.Message.toObjectList(msg.getResponseValuesList(),
    proto.tasks.ResponseTaskValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tasks.TaskGraphValueResponse}
 */
proto.tasks.TaskGraphValueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tasks.TaskGraphValueResponse;
  return proto.tasks.TaskGraphValueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tasks.TaskGraphValueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tasks.TaskGraphValueResponse}
 */
proto.tasks.TaskGraphValueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tasks.ResponseTaskValue;
      reader.readMessage(value,proto.tasks.ResponseTaskValue.deserializeBinaryFromReader);
      msg.addResponseValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tasks.TaskGraphValueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tasks.TaskGraphValueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tasks.TaskGraphValueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tasks.TaskGraphValueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tasks.ResponseTaskValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResponseTaskValue response_values = 1;
 * @return {!Array<!proto.tasks.ResponseTaskValue>}
 */
proto.tasks.TaskGraphValueResponse.prototype.getResponseValuesList = function() {
  return /** @type{!Array<!proto.tasks.ResponseTaskValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tasks.ResponseTaskValue, 1));
};


/**
 * @param {!Array<!proto.tasks.ResponseTaskValue>} value
 * @return {!proto.tasks.TaskGraphValueResponse} returns this
*/
proto.tasks.TaskGraphValueResponse.prototype.setResponseValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tasks.ResponseTaskValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.ResponseTaskValue}
 */
proto.tasks.TaskGraphValueResponse.prototype.addResponseValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tasks.ResponseTaskValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tasks.TaskGraphValueResponse} returns this
 */
proto.tasks.TaskGraphValueResponse.prototype.clearResponseValuesList = function() {
  return this.setResponseValuesList([]);
};


/**
 * @enum {number}
 */
proto.tasks.VariableNamespace = {
  SIGNAL: 0,
  DATA: 1,
  SCALE: 2
};

goog.object.extend(exports, proto.tasks);
