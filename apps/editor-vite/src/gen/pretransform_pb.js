// source: pretransform.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var tasks_pb = require('./tasks_pb.js');
goog.object.extend(proto, tasks_pb);
goog.exportSymbol('proto.pretransform.PlannerWarning', null, global);
goog.exportSymbol('proto.pretransform.PreTransformBrokenInteractivityWarning', null, global);
goog.exportSymbol('proto.pretransform.PreTransformExtractDataset', null, global);
goog.exportSymbol('proto.pretransform.PreTransformExtractRequest', null, global);
goog.exportSymbol('proto.pretransform.PreTransformExtractResponse', null, global);
goog.exportSymbol('proto.pretransform.PreTransformExtractWarning', null, global);
goog.exportSymbol('proto.pretransform.PreTransformExtractWarning.WarningTypeCase', null, global);
goog.exportSymbol('proto.pretransform.PreTransformInlineDataset', null, global);
goog.exportSymbol('proto.pretransform.PreTransformRowLimitWarning', null, global);
goog.exportSymbol('proto.pretransform.PreTransformSpecOpts', null, global);
goog.exportSymbol('proto.pretransform.PreTransformSpecRequest', null, global);
goog.exportSymbol('proto.pretransform.PreTransformSpecResponse', null, global);
goog.exportSymbol('proto.pretransform.PreTransformSpecWarning', null, global);
goog.exportSymbol('proto.pretransform.PreTransformSpecWarning.WarningTypeCase', null, global);
goog.exportSymbol('proto.pretransform.PreTransformUnsupportedWarning', null, global);
goog.exportSymbol('proto.pretransform.PreTransformValuesOpts', null, global);
goog.exportSymbol('proto.pretransform.PreTransformValuesRequest', null, global);
goog.exportSymbol('proto.pretransform.PreTransformValuesResponse', null, global);
goog.exportSymbol('proto.pretransform.PreTransformValuesWarning', null, global);
goog.exportSymbol('proto.pretransform.PreTransformValuesWarning.WarningTypeCase', null, global);
goog.exportSymbol('proto.pretransform.PreTransformVariable', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformSpecOpts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformSpecOpts.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformSpecOpts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformSpecOpts.displayName = 'proto.pretransform.PreTransformSpecOpts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformSpecRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pretransform.PreTransformSpecRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformSpecRequest.displayName = 'proto.pretransform.PreTransformSpecRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformSpecResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformSpecResponse.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformSpecResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformSpecResponse.displayName = 'proto.pretransform.PreTransformSpecResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformSpecWarning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pretransform.PreTransformSpecWarning.oneofGroups_);
};
goog.inherits(proto.pretransform.PreTransformSpecWarning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformSpecWarning.displayName = 'proto.pretransform.PreTransformSpecWarning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformRowLimitWarning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformRowLimitWarning.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformRowLimitWarning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformRowLimitWarning.displayName = 'proto.pretransform.PreTransformRowLimitWarning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformBrokenInteractivityWarning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformBrokenInteractivityWarning.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformBrokenInteractivityWarning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformBrokenInteractivityWarning.displayName = 'proto.pretransform.PreTransformBrokenInteractivityWarning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformUnsupportedWarning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pretransform.PreTransformUnsupportedWarning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformUnsupportedWarning.displayName = 'proto.pretransform.PreTransformUnsupportedWarning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformVariable.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformVariable.displayName = 'proto.pretransform.PreTransformVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformValuesOpts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformValuesOpts.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformValuesOpts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformValuesOpts.displayName = 'proto.pretransform.PreTransformValuesOpts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformValuesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pretransform.PreTransformValuesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformValuesRequest.displayName = 'proto.pretransform.PreTransformValuesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformValuesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformValuesResponse.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformValuesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformValuesResponse.displayName = 'proto.pretransform.PreTransformValuesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformValuesWarning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pretransform.PreTransformValuesWarning.oneofGroups_);
};
goog.inherits(proto.pretransform.PreTransformValuesWarning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformValuesWarning.displayName = 'proto.pretransform.PreTransformValuesWarning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformInlineDataset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pretransform.PreTransformInlineDataset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformInlineDataset.displayName = 'proto.pretransform.PreTransformInlineDataset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PlannerWarning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pretransform.PlannerWarning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PlannerWarning.displayName = 'proto.pretransform.PlannerWarning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformExtractDataset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformExtractDataset.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformExtractDataset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformExtractDataset.displayName = 'proto.pretransform.PreTransformExtractDataset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformExtractWarning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pretransform.PreTransformExtractWarning.oneofGroups_);
};
goog.inherits(proto.pretransform.PreTransformExtractWarning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformExtractWarning.displayName = 'proto.pretransform.PreTransformExtractWarning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformExtractResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformExtractResponse.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformExtractResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformExtractResponse.displayName = 'proto.pretransform.PreTransformExtractResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pretransform.PreTransformExtractRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pretransform.PreTransformExtractRequest.repeatedFields_, null);
};
goog.inherits(proto.pretransform.PreTransformExtractRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pretransform.PreTransformExtractRequest.displayName = 'proto.pretransform.PreTransformExtractRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformSpecOpts.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformSpecOpts.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformSpecOpts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformSpecOpts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformSpecOpts.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowLimit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inlineDatasetsList: jspb.Message.toObjectList(msg.getInlineDatasetsList(),
    proto.pretransform.PreTransformInlineDataset.toObject, includeInstance),
    preserveInteractivity: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformSpecOpts}
 */
proto.pretransform.PreTransformSpecOpts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformSpecOpts;
  return proto.pretransform.PreTransformSpecOpts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformSpecOpts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformSpecOpts}
 */
proto.pretransform.PreTransformSpecOpts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRowLimit(value);
      break;
    case 2:
      var value = new proto.pretransform.PreTransformInlineDataset;
      reader.readMessage(value,proto.pretransform.PreTransformInlineDataset.deserializeBinaryFromReader);
      msg.addInlineDatasets(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreserveInteractivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformSpecOpts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformSpecOpts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformSpecOpts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformSpecOpts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInlineDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pretransform.PreTransformInlineDataset.serializeBinaryToWriter
    );
  }
  f = message.getPreserveInteractivity();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 row_limit = 1;
 * @return {number}
 */
proto.pretransform.PreTransformSpecOpts.prototype.getRowLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pretransform.PreTransformSpecOpts} returns this
 */
proto.pretransform.PreTransformSpecOpts.prototype.setRowLimit = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pretransform.PreTransformSpecOpts} returns this
 */
proto.pretransform.PreTransformSpecOpts.prototype.clearRowLimit = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformSpecOpts.prototype.hasRowLimit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PreTransformInlineDataset inline_datasets = 2;
 * @return {!Array<!proto.pretransform.PreTransformInlineDataset>}
 */
proto.pretransform.PreTransformSpecOpts.prototype.getInlineDatasetsList = function() {
  return /** @type{!Array<!proto.pretransform.PreTransformInlineDataset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pretransform.PreTransformInlineDataset, 2));
};


/**
 * @param {!Array<!proto.pretransform.PreTransformInlineDataset>} value
 * @return {!proto.pretransform.PreTransformSpecOpts} returns this
*/
proto.pretransform.PreTransformSpecOpts.prototype.setInlineDatasetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pretransform.PreTransformInlineDataset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformInlineDataset}
 */
proto.pretransform.PreTransformSpecOpts.prototype.addInlineDatasets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pretransform.PreTransformInlineDataset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformSpecOpts} returns this
 */
proto.pretransform.PreTransformSpecOpts.prototype.clearInlineDatasetsList = function() {
  return this.setInlineDatasetsList([]);
};


/**
 * optional bool preserve_interactivity = 3;
 * @return {boolean}
 */
proto.pretransform.PreTransformSpecOpts.prototype.getPreserveInteractivity = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pretransform.PreTransformSpecOpts} returns this
 */
proto.pretransform.PreTransformSpecOpts.prototype.setPreserveInteractivity = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformSpecRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformSpecRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformSpecRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformSpecRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    localTz: jspb.Message.getFieldWithDefault(msg, 2, ""),
    outputTz: jspb.Message.getFieldWithDefault(msg, 3, ""),
    opts: (f = msg.getOpts()) && proto.pretransform.PreTransformSpecOpts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformSpecRequest}
 */
proto.pretransform.PreTransformSpecRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformSpecRequest;
  return proto.pretransform.PreTransformSpecRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformSpecRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformSpecRequest}
 */
proto.pretransform.PreTransformSpecRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpec(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalTz(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputTz(value);
      break;
    case 4:
      var value = new proto.pretransform.PreTransformSpecOpts;
      reader.readMessage(value,proto.pretransform.PreTransformSpecOpts.deserializeBinaryFromReader);
      msg.setOpts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformSpecRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformSpecRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformSpecRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformSpecRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocalTz();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOpts();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pretransform.PreTransformSpecOpts.serializeBinaryToWriter
    );
  }
};


/**
 * optional string spec = 1;
 * @return {string}
 */
proto.pretransform.PreTransformSpecRequest.prototype.getSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformSpecRequest} returns this
 */
proto.pretransform.PreTransformSpecRequest.prototype.setSpec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string local_tz = 2;
 * @return {string}
 */
proto.pretransform.PreTransformSpecRequest.prototype.getLocalTz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformSpecRequest} returns this
 */
proto.pretransform.PreTransformSpecRequest.prototype.setLocalTz = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string output_tz = 3;
 * @return {string}
 */
proto.pretransform.PreTransformSpecRequest.prototype.getOutputTz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformSpecRequest} returns this
 */
proto.pretransform.PreTransformSpecRequest.prototype.setOutputTz = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pretransform.PreTransformSpecRequest} returns this
 */
proto.pretransform.PreTransformSpecRequest.prototype.clearOutputTz = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformSpecRequest.prototype.hasOutputTz = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PreTransformSpecOpts opts = 4;
 * @return {?proto.pretransform.PreTransformSpecOpts}
 */
proto.pretransform.PreTransformSpecRequest.prototype.getOpts = function() {
  return /** @type{?proto.pretransform.PreTransformSpecOpts} */ (
    jspb.Message.getWrapperField(this, proto.pretransform.PreTransformSpecOpts, 4));
};


/**
 * @param {?proto.pretransform.PreTransformSpecOpts|undefined} value
 * @return {!proto.pretransform.PreTransformSpecRequest} returns this
*/
proto.pretransform.PreTransformSpecRequest.prototype.setOpts = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformSpecRequest} returns this
 */
proto.pretransform.PreTransformSpecRequest.prototype.clearOpts = function() {
  return this.setOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformSpecRequest.prototype.hasOpts = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformSpecResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformSpecResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformSpecResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformSpecResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformSpecResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    warningsList: jspb.Message.toObjectList(msg.getWarningsList(),
    proto.pretransform.PreTransformSpecWarning.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformSpecResponse}
 */
proto.pretransform.PreTransformSpecResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformSpecResponse;
  return proto.pretransform.PreTransformSpecResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformSpecResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformSpecResponse}
 */
proto.pretransform.PreTransformSpecResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.pretransform.PreTransformSpecWarning;
      reader.readMessage(value,proto.pretransform.PreTransformSpecWarning.deserializeBinaryFromReader);
      msg.addWarnings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformSpecResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformSpecResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformSpecResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformSpecResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWarningsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pretransform.PreTransformSpecWarning.serializeBinaryToWriter
    );
  }
};


/**
 * optional string spec = 1;
 * @return {string}
 */
proto.pretransform.PreTransformSpecResponse.prototype.getSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformSpecResponse} returns this
 */
proto.pretransform.PreTransformSpecResponse.prototype.setSpec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PreTransformSpecWarning warnings = 2;
 * @return {!Array<!proto.pretransform.PreTransformSpecWarning>}
 */
proto.pretransform.PreTransformSpecResponse.prototype.getWarningsList = function() {
  return /** @type{!Array<!proto.pretransform.PreTransformSpecWarning>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pretransform.PreTransformSpecWarning, 2));
};


/**
 * @param {!Array<!proto.pretransform.PreTransformSpecWarning>} value
 * @return {!proto.pretransform.PreTransformSpecResponse} returns this
*/
proto.pretransform.PreTransformSpecResponse.prototype.setWarningsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pretransform.PreTransformSpecWarning=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformSpecWarning}
 */
proto.pretransform.PreTransformSpecResponse.prototype.addWarnings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pretransform.PreTransformSpecWarning, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformSpecResponse} returns this
 */
proto.pretransform.PreTransformSpecResponse.prototype.clearWarningsList = function() {
  return this.setWarningsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pretransform.PreTransformSpecWarning.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.pretransform.PreTransformSpecWarning.WarningTypeCase = {
  WARNING_TYPE_NOT_SET: 0,
  ROW_LIMIT: 1,
  BROKEN_INTERACTIVITY: 2,
  UNSUPPORTED: 3,
  PLANNER: 4
};

/**
 * @return {proto.pretransform.PreTransformSpecWarning.WarningTypeCase}
 */
proto.pretransform.PreTransformSpecWarning.prototype.getWarningTypeCase = function() {
  return /** @type {proto.pretransform.PreTransformSpecWarning.WarningTypeCase} */(jspb.Message.computeOneofCase(this, proto.pretransform.PreTransformSpecWarning.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformSpecWarning.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformSpecWarning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformSpecWarning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformSpecWarning.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowLimit: (f = msg.getRowLimit()) && proto.pretransform.PreTransformRowLimitWarning.toObject(includeInstance, f),
    brokenInteractivity: (f = msg.getBrokenInteractivity()) && proto.pretransform.PreTransformBrokenInteractivityWarning.toObject(includeInstance, f),
    unsupported: (f = msg.getUnsupported()) && proto.pretransform.PreTransformUnsupportedWarning.toObject(includeInstance, f),
    planner: (f = msg.getPlanner()) && proto.pretransform.PlannerWarning.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformSpecWarning}
 */
proto.pretransform.PreTransformSpecWarning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformSpecWarning;
  return proto.pretransform.PreTransformSpecWarning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformSpecWarning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformSpecWarning}
 */
proto.pretransform.PreTransformSpecWarning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pretransform.PreTransformRowLimitWarning;
      reader.readMessage(value,proto.pretransform.PreTransformRowLimitWarning.deserializeBinaryFromReader);
      msg.setRowLimit(value);
      break;
    case 2:
      var value = new proto.pretransform.PreTransformBrokenInteractivityWarning;
      reader.readMessage(value,proto.pretransform.PreTransformBrokenInteractivityWarning.deserializeBinaryFromReader);
      msg.setBrokenInteractivity(value);
      break;
    case 3:
      var value = new proto.pretransform.PreTransformUnsupportedWarning;
      reader.readMessage(value,proto.pretransform.PreTransformUnsupportedWarning.deserializeBinaryFromReader);
      msg.setUnsupported(value);
      break;
    case 4:
      var value = new proto.pretransform.PlannerWarning;
      reader.readMessage(value,proto.pretransform.PlannerWarning.deserializeBinaryFromReader);
      msg.setPlanner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformSpecWarning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformSpecWarning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformSpecWarning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformSpecWarning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowLimit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pretransform.PreTransformRowLimitWarning.serializeBinaryToWriter
    );
  }
  f = message.getBrokenInteractivity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pretransform.PreTransformBrokenInteractivityWarning.serializeBinaryToWriter
    );
  }
  f = message.getUnsupported();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pretransform.PreTransformUnsupportedWarning.serializeBinaryToWriter
    );
  }
  f = message.getPlanner();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pretransform.PlannerWarning.serializeBinaryToWriter
    );
  }
};


/**
 * optional PreTransformRowLimitWarning row_limit = 1;
 * @return {?proto.pretransform.PreTransformRowLimitWarning}
 */
proto.pretransform.PreTransformSpecWarning.prototype.getRowLimit = function() {
  return /** @type{?proto.pretransform.PreTransformRowLimitWarning} */ (
    jspb.Message.getWrapperField(this, proto.pretransform.PreTransformRowLimitWarning, 1));
};


/**
 * @param {?proto.pretransform.PreTransformRowLimitWarning|undefined} value
 * @return {!proto.pretransform.PreTransformSpecWarning} returns this
*/
proto.pretransform.PreTransformSpecWarning.prototype.setRowLimit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.pretransform.PreTransformSpecWarning.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformSpecWarning} returns this
 */
proto.pretransform.PreTransformSpecWarning.prototype.clearRowLimit = function() {
  return this.setRowLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformSpecWarning.prototype.hasRowLimit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PreTransformBrokenInteractivityWarning broken_interactivity = 2;
 * @return {?proto.pretransform.PreTransformBrokenInteractivityWarning}
 */
proto.pretransform.PreTransformSpecWarning.prototype.getBrokenInteractivity = function() {
  return /** @type{?proto.pretransform.PreTransformBrokenInteractivityWarning} */ (
    jspb.Message.getWrapperField(this, proto.pretransform.PreTransformBrokenInteractivityWarning, 2));
};


/**
 * @param {?proto.pretransform.PreTransformBrokenInteractivityWarning|undefined} value
 * @return {!proto.pretransform.PreTransformSpecWarning} returns this
*/
proto.pretransform.PreTransformSpecWarning.prototype.setBrokenInteractivity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.pretransform.PreTransformSpecWarning.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformSpecWarning} returns this
 */
proto.pretransform.PreTransformSpecWarning.prototype.clearBrokenInteractivity = function() {
  return this.setBrokenInteractivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformSpecWarning.prototype.hasBrokenInteractivity = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PreTransformUnsupportedWarning unsupported = 3;
 * @return {?proto.pretransform.PreTransformUnsupportedWarning}
 */
proto.pretransform.PreTransformSpecWarning.prototype.getUnsupported = function() {
  return /** @type{?proto.pretransform.PreTransformUnsupportedWarning} */ (
    jspb.Message.getWrapperField(this, proto.pretransform.PreTransformUnsupportedWarning, 3));
};


/**
 * @param {?proto.pretransform.PreTransformUnsupportedWarning|undefined} value
 * @return {!proto.pretransform.PreTransformSpecWarning} returns this
*/
proto.pretransform.PreTransformSpecWarning.prototype.setUnsupported = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.pretransform.PreTransformSpecWarning.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformSpecWarning} returns this
 */
proto.pretransform.PreTransformSpecWarning.prototype.clearUnsupported = function() {
  return this.setUnsupported(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformSpecWarning.prototype.hasUnsupported = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PlannerWarning planner = 4;
 * @return {?proto.pretransform.PlannerWarning}
 */
proto.pretransform.PreTransformSpecWarning.prototype.getPlanner = function() {
  return /** @type{?proto.pretransform.PlannerWarning} */ (
    jspb.Message.getWrapperField(this, proto.pretransform.PlannerWarning, 4));
};


/**
 * @param {?proto.pretransform.PlannerWarning|undefined} value
 * @return {!proto.pretransform.PreTransformSpecWarning} returns this
*/
proto.pretransform.PreTransformSpecWarning.prototype.setPlanner = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.pretransform.PreTransformSpecWarning.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformSpecWarning} returns this
 */
proto.pretransform.PreTransformSpecWarning.prototype.clearPlanner = function() {
  return this.setPlanner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformSpecWarning.prototype.hasPlanner = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformRowLimitWarning.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformRowLimitWarning.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformRowLimitWarning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformRowLimitWarning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformRowLimitWarning.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetsList: jspb.Message.toObjectList(msg.getDatasetsList(),
    tasks_pb.Variable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformRowLimitWarning}
 */
proto.pretransform.PreTransformRowLimitWarning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformRowLimitWarning;
  return proto.pretransform.PreTransformRowLimitWarning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformRowLimitWarning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformRowLimitWarning}
 */
proto.pretransform.PreTransformRowLimitWarning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tasks_pb.Variable;
      reader.readMessage(value,tasks_pb.Variable.deserializeBinaryFromReader);
      msg.addDatasets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformRowLimitWarning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformRowLimitWarning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformRowLimitWarning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformRowLimitWarning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      tasks_pb.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * repeated tasks.Variable datasets = 1;
 * @return {!Array<!proto.tasks.Variable>}
 */
proto.pretransform.PreTransformRowLimitWarning.prototype.getDatasetsList = function() {
  return /** @type{!Array<!proto.tasks.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, tasks_pb.Variable, 1));
};


/**
 * @param {!Array<!proto.tasks.Variable>} value
 * @return {!proto.pretransform.PreTransformRowLimitWarning} returns this
*/
proto.pretransform.PreTransformRowLimitWarning.prototype.setDatasetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tasks.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.Variable}
 */
proto.pretransform.PreTransformRowLimitWarning.prototype.addDatasets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tasks.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformRowLimitWarning} returns this
 */
proto.pretransform.PreTransformRowLimitWarning.prototype.clearDatasetsList = function() {
  return this.setDatasetsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformBrokenInteractivityWarning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformBrokenInteractivityWarning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.toObject = function(includeInstance, msg) {
  var f, obj = {
    varsList: jspb.Message.toObjectList(msg.getVarsList(),
    tasks_pb.Variable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformBrokenInteractivityWarning}
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformBrokenInteractivityWarning;
  return proto.pretransform.PreTransformBrokenInteractivityWarning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformBrokenInteractivityWarning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformBrokenInteractivityWarning}
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tasks_pb.Variable;
      reader.readMessage(value,tasks_pb.Variable.deserializeBinaryFromReader);
      msg.addVars(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformBrokenInteractivityWarning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformBrokenInteractivityWarning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      tasks_pb.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * repeated tasks.Variable vars = 1;
 * @return {!Array<!proto.tasks.Variable>}
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.prototype.getVarsList = function() {
  return /** @type{!Array<!proto.tasks.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, tasks_pb.Variable, 1));
};


/**
 * @param {!Array<!proto.tasks.Variable>} value
 * @return {!proto.pretransform.PreTransformBrokenInteractivityWarning} returns this
*/
proto.pretransform.PreTransformBrokenInteractivityWarning.prototype.setVarsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tasks.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.Variable}
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.prototype.addVars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tasks.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformBrokenInteractivityWarning} returns this
 */
proto.pretransform.PreTransformBrokenInteractivityWarning.prototype.clearVarsList = function() {
  return this.setVarsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformUnsupportedWarning.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformUnsupportedWarning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformUnsupportedWarning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformUnsupportedWarning.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformUnsupportedWarning}
 */
proto.pretransform.PreTransformUnsupportedWarning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformUnsupportedWarning;
  return proto.pretransform.PreTransformUnsupportedWarning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformUnsupportedWarning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformUnsupportedWarning}
 */
proto.pretransform.PreTransformUnsupportedWarning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformUnsupportedWarning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformUnsupportedWarning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformUnsupportedWarning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformUnsupportedWarning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformVariable.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    variable: (f = msg.getVariable()) && tasks_pb.Variable.toObject(includeInstance, f),
    scopeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformVariable}
 */
proto.pretransform.PreTransformVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformVariable;
  return proto.pretransform.PreTransformVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformVariable}
 */
proto.pretransform.PreTransformVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tasks_pb.Variable;
      reader.readMessage(value,tasks_pb.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addScope(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      tasks_pb.Variable.serializeBinaryToWriter
    );
  }
  f = message.getScopeList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * optional tasks.Variable variable = 1;
 * @return {?proto.tasks.Variable}
 */
proto.pretransform.PreTransformVariable.prototype.getVariable = function() {
  return /** @type{?proto.tasks.Variable} */ (
    jspb.Message.getWrapperField(this, tasks_pb.Variable, 1));
};


/**
 * @param {?proto.tasks.Variable|undefined} value
 * @return {!proto.pretransform.PreTransformVariable} returns this
*/
proto.pretransform.PreTransformVariable.prototype.setVariable = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformVariable} returns this
 */
proto.pretransform.PreTransformVariable.prototype.clearVariable = function() {
  return this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformVariable.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 scope = 2;
 * @return {!Array<number>}
 */
proto.pretransform.PreTransformVariable.prototype.getScopeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pretransform.PreTransformVariable} returns this
 */
proto.pretransform.PreTransformVariable.prototype.setScopeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformVariable} returns this
 */
proto.pretransform.PreTransformVariable.prototype.addScope = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformVariable} returns this
 */
proto.pretransform.PreTransformVariable.prototype.clearScopeList = function() {
  return this.setScopeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformValuesOpts.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformValuesOpts.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformValuesOpts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformValuesOpts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformValuesOpts.toObject = function(includeInstance, msg) {
  var f, obj = {
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.pretransform.PreTransformVariable.toObject, includeInstance),
    inlineDatasetsList: jspb.Message.toObjectList(msg.getInlineDatasetsList(),
    proto.pretransform.PreTransformInlineDataset.toObject, includeInstance),
    rowLimit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformValuesOpts}
 */
proto.pretransform.PreTransformValuesOpts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformValuesOpts;
  return proto.pretransform.PreTransformValuesOpts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformValuesOpts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformValuesOpts}
 */
proto.pretransform.PreTransformValuesOpts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pretransform.PreTransformVariable;
      reader.readMessage(value,proto.pretransform.PreTransformVariable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    case 2:
      var value = new proto.pretransform.PreTransformInlineDataset;
      reader.readMessage(value,proto.pretransform.PreTransformInlineDataset.deserializeBinaryFromReader);
      msg.addInlineDatasets(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRowLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformValuesOpts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformValuesOpts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformValuesOpts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformValuesOpts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pretransform.PreTransformVariable.serializeBinaryToWriter
    );
  }
  f = message.getInlineDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pretransform.PreTransformInlineDataset.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated PreTransformVariable variables = 1;
 * @return {!Array<!proto.pretransform.PreTransformVariable>}
 */
proto.pretransform.PreTransformValuesOpts.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.pretransform.PreTransformVariable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pretransform.PreTransformVariable, 1));
};


/**
 * @param {!Array<!proto.pretransform.PreTransformVariable>} value
 * @return {!proto.pretransform.PreTransformValuesOpts} returns this
*/
proto.pretransform.PreTransformValuesOpts.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pretransform.PreTransformVariable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformVariable}
 */
proto.pretransform.PreTransformValuesOpts.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pretransform.PreTransformVariable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformValuesOpts} returns this
 */
proto.pretransform.PreTransformValuesOpts.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};


/**
 * repeated PreTransformInlineDataset inline_datasets = 2;
 * @return {!Array<!proto.pretransform.PreTransformInlineDataset>}
 */
proto.pretransform.PreTransformValuesOpts.prototype.getInlineDatasetsList = function() {
  return /** @type{!Array<!proto.pretransform.PreTransformInlineDataset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pretransform.PreTransformInlineDataset, 2));
};


/**
 * @param {!Array<!proto.pretransform.PreTransformInlineDataset>} value
 * @return {!proto.pretransform.PreTransformValuesOpts} returns this
*/
proto.pretransform.PreTransformValuesOpts.prototype.setInlineDatasetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pretransform.PreTransformInlineDataset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformInlineDataset}
 */
proto.pretransform.PreTransformValuesOpts.prototype.addInlineDatasets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pretransform.PreTransformInlineDataset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformValuesOpts} returns this
 */
proto.pretransform.PreTransformValuesOpts.prototype.clearInlineDatasetsList = function() {
  return this.setInlineDatasetsList([]);
};


/**
 * optional uint32 row_limit = 3;
 * @return {number}
 */
proto.pretransform.PreTransformValuesOpts.prototype.getRowLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pretransform.PreTransformValuesOpts} returns this
 */
proto.pretransform.PreTransformValuesOpts.prototype.setRowLimit = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pretransform.PreTransformValuesOpts} returns this
 */
proto.pretransform.PreTransformValuesOpts.prototype.clearRowLimit = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformValuesOpts.prototype.hasRowLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformValuesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformValuesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformValuesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformValuesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    localTz: jspb.Message.getFieldWithDefault(msg, 2, ""),
    defaultInputTz: jspb.Message.getFieldWithDefault(msg, 3, ""),
    opts: (f = msg.getOpts()) && proto.pretransform.PreTransformValuesOpts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformValuesRequest}
 */
proto.pretransform.PreTransformValuesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformValuesRequest;
  return proto.pretransform.PreTransformValuesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformValuesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformValuesRequest}
 */
proto.pretransform.PreTransformValuesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpec(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalTz(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultInputTz(value);
      break;
    case 4:
      var value = new proto.pretransform.PreTransformValuesOpts;
      reader.readMessage(value,proto.pretransform.PreTransformValuesOpts.deserializeBinaryFromReader);
      msg.setOpts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformValuesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformValuesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformValuesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformValuesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocalTz();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOpts();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pretransform.PreTransformValuesOpts.serializeBinaryToWriter
    );
  }
};


/**
 * optional string spec = 1;
 * @return {string}
 */
proto.pretransform.PreTransformValuesRequest.prototype.getSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformValuesRequest} returns this
 */
proto.pretransform.PreTransformValuesRequest.prototype.setSpec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string local_tz = 2;
 * @return {string}
 */
proto.pretransform.PreTransformValuesRequest.prototype.getLocalTz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformValuesRequest} returns this
 */
proto.pretransform.PreTransformValuesRequest.prototype.setLocalTz = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string default_input_tz = 3;
 * @return {string}
 */
proto.pretransform.PreTransformValuesRequest.prototype.getDefaultInputTz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformValuesRequest} returns this
 */
proto.pretransform.PreTransformValuesRequest.prototype.setDefaultInputTz = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pretransform.PreTransformValuesRequest} returns this
 */
proto.pretransform.PreTransformValuesRequest.prototype.clearDefaultInputTz = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformValuesRequest.prototype.hasDefaultInputTz = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PreTransformValuesOpts opts = 4;
 * @return {?proto.pretransform.PreTransformValuesOpts}
 */
proto.pretransform.PreTransformValuesRequest.prototype.getOpts = function() {
  return /** @type{?proto.pretransform.PreTransformValuesOpts} */ (
    jspb.Message.getWrapperField(this, proto.pretransform.PreTransformValuesOpts, 4));
};


/**
 * @param {?proto.pretransform.PreTransformValuesOpts|undefined} value
 * @return {!proto.pretransform.PreTransformValuesRequest} returns this
*/
proto.pretransform.PreTransformValuesRequest.prototype.setOpts = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformValuesRequest} returns this
 */
proto.pretransform.PreTransformValuesRequest.prototype.clearOpts = function() {
  return this.setOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformValuesRequest.prototype.hasOpts = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformValuesResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformValuesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformValuesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformValuesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformValuesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    tasks_pb.ResponseTaskValue.toObject, includeInstance),
    warningsList: jspb.Message.toObjectList(msg.getWarningsList(),
    proto.pretransform.PreTransformValuesWarning.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformValuesResponse}
 */
proto.pretransform.PreTransformValuesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformValuesResponse;
  return proto.pretransform.PreTransformValuesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformValuesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformValuesResponse}
 */
proto.pretransform.PreTransformValuesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tasks_pb.ResponseTaskValue;
      reader.readMessage(value,tasks_pb.ResponseTaskValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 2:
      var value = new proto.pretransform.PreTransformValuesWarning;
      reader.readMessage(value,proto.pretransform.PreTransformValuesWarning.deserializeBinaryFromReader);
      msg.addWarnings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformValuesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformValuesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformValuesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformValuesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      tasks_pb.ResponseTaskValue.serializeBinaryToWriter
    );
  }
  f = message.getWarningsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pretransform.PreTransformValuesWarning.serializeBinaryToWriter
    );
  }
};


/**
 * repeated tasks.ResponseTaskValue values = 1;
 * @return {!Array<!proto.tasks.ResponseTaskValue>}
 */
proto.pretransform.PreTransformValuesResponse.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.tasks.ResponseTaskValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, tasks_pb.ResponseTaskValue, 1));
};


/**
 * @param {!Array<!proto.tasks.ResponseTaskValue>} value
 * @return {!proto.pretransform.PreTransformValuesResponse} returns this
*/
proto.pretransform.PreTransformValuesResponse.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tasks.ResponseTaskValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.ResponseTaskValue}
 */
proto.pretransform.PreTransformValuesResponse.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tasks.ResponseTaskValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformValuesResponse} returns this
 */
proto.pretransform.PreTransformValuesResponse.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * repeated PreTransformValuesWarning warnings = 2;
 * @return {!Array<!proto.pretransform.PreTransformValuesWarning>}
 */
proto.pretransform.PreTransformValuesResponse.prototype.getWarningsList = function() {
  return /** @type{!Array<!proto.pretransform.PreTransformValuesWarning>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pretransform.PreTransformValuesWarning, 2));
};


/**
 * @param {!Array<!proto.pretransform.PreTransformValuesWarning>} value
 * @return {!proto.pretransform.PreTransformValuesResponse} returns this
*/
proto.pretransform.PreTransformValuesResponse.prototype.setWarningsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pretransform.PreTransformValuesWarning=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformValuesWarning}
 */
proto.pretransform.PreTransformValuesResponse.prototype.addWarnings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pretransform.PreTransformValuesWarning, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformValuesResponse} returns this
 */
proto.pretransform.PreTransformValuesResponse.prototype.clearWarningsList = function() {
  return this.setWarningsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pretransform.PreTransformValuesWarning.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pretransform.PreTransformValuesWarning.WarningTypeCase = {
  WARNING_TYPE_NOT_SET: 0,
  ROW_LIMIT: 1,
  PLANNER: 2
};

/**
 * @return {proto.pretransform.PreTransformValuesWarning.WarningTypeCase}
 */
proto.pretransform.PreTransformValuesWarning.prototype.getWarningTypeCase = function() {
  return /** @type {proto.pretransform.PreTransformValuesWarning.WarningTypeCase} */(jspb.Message.computeOneofCase(this, proto.pretransform.PreTransformValuesWarning.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformValuesWarning.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformValuesWarning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformValuesWarning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformValuesWarning.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowLimit: (f = msg.getRowLimit()) && proto.pretransform.PreTransformRowLimitWarning.toObject(includeInstance, f),
    planner: (f = msg.getPlanner()) && proto.pretransform.PlannerWarning.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformValuesWarning}
 */
proto.pretransform.PreTransformValuesWarning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformValuesWarning;
  return proto.pretransform.PreTransformValuesWarning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformValuesWarning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformValuesWarning}
 */
proto.pretransform.PreTransformValuesWarning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pretransform.PreTransformRowLimitWarning;
      reader.readMessage(value,proto.pretransform.PreTransformRowLimitWarning.deserializeBinaryFromReader);
      msg.setRowLimit(value);
      break;
    case 2:
      var value = new proto.pretransform.PlannerWarning;
      reader.readMessage(value,proto.pretransform.PlannerWarning.deserializeBinaryFromReader);
      msg.setPlanner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformValuesWarning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformValuesWarning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformValuesWarning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformValuesWarning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowLimit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pretransform.PreTransformRowLimitWarning.serializeBinaryToWriter
    );
  }
  f = message.getPlanner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pretransform.PlannerWarning.serializeBinaryToWriter
    );
  }
};


/**
 * optional PreTransformRowLimitWarning row_limit = 1;
 * @return {?proto.pretransform.PreTransformRowLimitWarning}
 */
proto.pretransform.PreTransformValuesWarning.prototype.getRowLimit = function() {
  return /** @type{?proto.pretransform.PreTransformRowLimitWarning} */ (
    jspb.Message.getWrapperField(this, proto.pretransform.PreTransformRowLimitWarning, 1));
};


/**
 * @param {?proto.pretransform.PreTransformRowLimitWarning|undefined} value
 * @return {!proto.pretransform.PreTransformValuesWarning} returns this
*/
proto.pretransform.PreTransformValuesWarning.prototype.setRowLimit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.pretransform.PreTransformValuesWarning.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformValuesWarning} returns this
 */
proto.pretransform.PreTransformValuesWarning.prototype.clearRowLimit = function() {
  return this.setRowLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformValuesWarning.prototype.hasRowLimit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlannerWarning planner = 2;
 * @return {?proto.pretransform.PlannerWarning}
 */
proto.pretransform.PreTransformValuesWarning.prototype.getPlanner = function() {
  return /** @type{?proto.pretransform.PlannerWarning} */ (
    jspb.Message.getWrapperField(this, proto.pretransform.PlannerWarning, 2));
};


/**
 * @param {?proto.pretransform.PlannerWarning|undefined} value
 * @return {!proto.pretransform.PreTransformValuesWarning} returns this
*/
proto.pretransform.PreTransformValuesWarning.prototype.setPlanner = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.pretransform.PreTransformValuesWarning.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformValuesWarning} returns this
 */
proto.pretransform.PreTransformValuesWarning.prototype.clearPlanner = function() {
  return this.setPlanner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformValuesWarning.prototype.hasPlanner = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformInlineDataset.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformInlineDataset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformInlineDataset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformInlineDataset.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    table: msg.getTable_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformInlineDataset}
 */
proto.pretransform.PreTransformInlineDataset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformInlineDataset;
  return proto.pretransform.PreTransformInlineDataset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformInlineDataset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformInlineDataset}
 */
proto.pretransform.PreTransformInlineDataset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformInlineDataset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformInlineDataset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformInlineDataset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformInlineDataset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pretransform.PreTransformInlineDataset.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformInlineDataset} returns this
 */
proto.pretransform.PreTransformInlineDataset.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes table = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pretransform.PreTransformInlineDataset.prototype.getTable = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes table = 2;
 * This is a type-conversion wrapper around `getTable()`
 * @return {string}
 */
proto.pretransform.PreTransformInlineDataset.prototype.getTable_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTable()));
};


/**
 * optional bytes table = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTable()`
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformInlineDataset.prototype.getTable_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pretransform.PreTransformInlineDataset} returns this
 */
proto.pretransform.PreTransformInlineDataset.prototype.setTable = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PlannerWarning.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PlannerWarning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PlannerWarning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PlannerWarning.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PlannerWarning}
 */
proto.pretransform.PlannerWarning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PlannerWarning;
  return proto.pretransform.PlannerWarning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PlannerWarning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PlannerWarning}
 */
proto.pretransform.PlannerWarning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PlannerWarning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PlannerWarning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PlannerWarning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PlannerWarning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.pretransform.PlannerWarning.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PlannerWarning} returns this
 */
proto.pretransform.PlannerWarning.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformExtractDataset.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformExtractDataset.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformExtractDataset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformExtractDataset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformExtractDataset.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scopeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    table: msg.getTable_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformExtractDataset}
 */
proto.pretransform.PreTransformExtractDataset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformExtractDataset;
  return proto.pretransform.PreTransformExtractDataset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformExtractDataset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformExtractDataset}
 */
proto.pretransform.PreTransformExtractDataset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addScope(values[i]);
      }
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformExtractDataset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformExtractDataset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformExtractDataset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformExtractDataset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScopeList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getTable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pretransform.PreTransformExtractDataset.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformExtractDataset} returns this
 */
proto.pretransform.PreTransformExtractDataset.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated uint32 scope = 2;
 * @return {!Array<number>}
 */
proto.pretransform.PreTransformExtractDataset.prototype.getScopeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pretransform.PreTransformExtractDataset} returns this
 */
proto.pretransform.PreTransformExtractDataset.prototype.setScopeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformExtractDataset} returns this
 */
proto.pretransform.PreTransformExtractDataset.prototype.addScope = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformExtractDataset} returns this
 */
proto.pretransform.PreTransformExtractDataset.prototype.clearScopeList = function() {
  return this.setScopeList([]);
};


/**
 * optional bytes table = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pretransform.PreTransformExtractDataset.prototype.getTable = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes table = 3;
 * This is a type-conversion wrapper around `getTable()`
 * @return {string}
 */
proto.pretransform.PreTransformExtractDataset.prototype.getTable_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTable()));
};


/**
 * optional bytes table = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTable()`
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformExtractDataset.prototype.getTable_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pretransform.PreTransformExtractDataset} returns this
 */
proto.pretransform.PreTransformExtractDataset.prototype.setTable = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pretransform.PreTransformExtractWarning.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.pretransform.PreTransformExtractWarning.WarningTypeCase = {
  WARNING_TYPE_NOT_SET: 0,
  PLANNER: 1
};

/**
 * @return {proto.pretransform.PreTransformExtractWarning.WarningTypeCase}
 */
proto.pretransform.PreTransformExtractWarning.prototype.getWarningTypeCase = function() {
  return /** @type {proto.pretransform.PreTransformExtractWarning.WarningTypeCase} */(jspb.Message.computeOneofCase(this, proto.pretransform.PreTransformExtractWarning.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformExtractWarning.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformExtractWarning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformExtractWarning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformExtractWarning.toObject = function(includeInstance, msg) {
  var f, obj = {
    planner: (f = msg.getPlanner()) && proto.pretransform.PlannerWarning.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformExtractWarning}
 */
proto.pretransform.PreTransformExtractWarning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformExtractWarning;
  return proto.pretransform.PreTransformExtractWarning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformExtractWarning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformExtractWarning}
 */
proto.pretransform.PreTransformExtractWarning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pretransform.PlannerWarning;
      reader.readMessage(value,proto.pretransform.PlannerWarning.deserializeBinaryFromReader);
      msg.setPlanner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformExtractWarning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformExtractWarning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformExtractWarning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformExtractWarning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pretransform.PlannerWarning.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlannerWarning planner = 1;
 * @return {?proto.pretransform.PlannerWarning}
 */
proto.pretransform.PreTransformExtractWarning.prototype.getPlanner = function() {
  return /** @type{?proto.pretransform.PlannerWarning} */ (
    jspb.Message.getWrapperField(this, proto.pretransform.PlannerWarning, 1));
};


/**
 * @param {?proto.pretransform.PlannerWarning|undefined} value
 * @return {!proto.pretransform.PreTransformExtractWarning} returns this
*/
proto.pretransform.PreTransformExtractWarning.prototype.setPlanner = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.pretransform.PreTransformExtractWarning.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pretransform.PreTransformExtractWarning} returns this
 */
proto.pretransform.PreTransformExtractWarning.prototype.clearPlanner = function() {
  return this.setPlanner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformExtractWarning.prototype.hasPlanner = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformExtractResponse.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformExtractResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformExtractResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformExtractResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformExtractResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datasetsList: jspb.Message.toObjectList(msg.getDatasetsList(),
    proto.pretransform.PreTransformExtractDataset.toObject, includeInstance),
    warningsList: jspb.Message.toObjectList(msg.getWarningsList(),
    proto.pretransform.PreTransformExtractWarning.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformExtractResponse}
 */
proto.pretransform.PreTransformExtractResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformExtractResponse;
  return proto.pretransform.PreTransformExtractResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformExtractResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformExtractResponse}
 */
proto.pretransform.PreTransformExtractResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.pretransform.PreTransformExtractDataset;
      reader.readMessage(value,proto.pretransform.PreTransformExtractDataset.deserializeBinaryFromReader);
      msg.addDatasets(value);
      break;
    case 3:
      var value = new proto.pretransform.PreTransformExtractWarning;
      reader.readMessage(value,proto.pretransform.PreTransformExtractWarning.deserializeBinaryFromReader);
      msg.addWarnings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformExtractResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformExtractResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformExtractResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformExtractResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pretransform.PreTransformExtractDataset.serializeBinaryToWriter
    );
  }
  f = message.getWarningsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pretransform.PreTransformExtractWarning.serializeBinaryToWriter
    );
  }
};


/**
 * optional string spec = 1;
 * @return {string}
 */
proto.pretransform.PreTransformExtractResponse.prototype.getSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformExtractResponse} returns this
 */
proto.pretransform.PreTransformExtractResponse.prototype.setSpec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PreTransformExtractDataset datasets = 2;
 * @return {!Array<!proto.pretransform.PreTransformExtractDataset>}
 */
proto.pretransform.PreTransformExtractResponse.prototype.getDatasetsList = function() {
  return /** @type{!Array<!proto.pretransform.PreTransformExtractDataset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pretransform.PreTransformExtractDataset, 2));
};


/**
 * @param {!Array<!proto.pretransform.PreTransformExtractDataset>} value
 * @return {!proto.pretransform.PreTransformExtractResponse} returns this
*/
proto.pretransform.PreTransformExtractResponse.prototype.setDatasetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pretransform.PreTransformExtractDataset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformExtractDataset}
 */
proto.pretransform.PreTransformExtractResponse.prototype.addDatasets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pretransform.PreTransformExtractDataset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformExtractResponse} returns this
 */
proto.pretransform.PreTransformExtractResponse.prototype.clearDatasetsList = function() {
  return this.setDatasetsList([]);
};


/**
 * repeated PreTransformExtractWarning warnings = 3;
 * @return {!Array<!proto.pretransform.PreTransformExtractWarning>}
 */
proto.pretransform.PreTransformExtractResponse.prototype.getWarningsList = function() {
  return /** @type{!Array<!proto.pretransform.PreTransformExtractWarning>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pretransform.PreTransformExtractWarning, 3));
};


/**
 * @param {!Array<!proto.pretransform.PreTransformExtractWarning>} value
 * @return {!proto.pretransform.PreTransformExtractResponse} returns this
*/
proto.pretransform.PreTransformExtractResponse.prototype.setWarningsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pretransform.PreTransformExtractWarning=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformExtractWarning}
 */
proto.pretransform.PreTransformExtractResponse.prototype.addWarnings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pretransform.PreTransformExtractWarning, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformExtractResponse} returns this
 */
proto.pretransform.PreTransformExtractResponse.prototype.clearWarningsList = function() {
  return this.setWarningsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pretransform.PreTransformExtractRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pretransform.PreTransformExtractRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pretransform.PreTransformExtractRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pretransform.PreTransformExtractRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformExtractRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    localTz: jspb.Message.getFieldWithDefault(msg, 2, ""),
    defaultInputTz: jspb.Message.getFieldWithDefault(msg, 3, ""),
    preserveInteractivity: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    inlineDatasetsList: jspb.Message.toObjectList(msg.getInlineDatasetsList(),
    proto.pretransform.PreTransformInlineDataset.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pretransform.PreTransformExtractRequest}
 */
proto.pretransform.PreTransformExtractRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pretransform.PreTransformExtractRequest;
  return proto.pretransform.PreTransformExtractRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pretransform.PreTransformExtractRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pretransform.PreTransformExtractRequest}
 */
proto.pretransform.PreTransformExtractRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpec(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalTz(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultInputTz(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreserveInteractivity(value);
      break;
    case 5:
      var value = new proto.pretransform.PreTransformInlineDataset;
      reader.readMessage(value,proto.pretransform.PreTransformInlineDataset.deserializeBinaryFromReader);
      msg.addInlineDatasets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pretransform.PreTransformExtractRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pretransform.PreTransformExtractRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pretransform.PreTransformExtractRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pretransform.PreTransformExtractRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocalTz();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPreserveInteractivity();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getInlineDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pretransform.PreTransformInlineDataset.serializeBinaryToWriter
    );
  }
};


/**
 * optional string spec = 1;
 * @return {string}
 */
proto.pretransform.PreTransformExtractRequest.prototype.getSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformExtractRequest} returns this
 */
proto.pretransform.PreTransformExtractRequest.prototype.setSpec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string local_tz = 2;
 * @return {string}
 */
proto.pretransform.PreTransformExtractRequest.prototype.getLocalTz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformExtractRequest} returns this
 */
proto.pretransform.PreTransformExtractRequest.prototype.setLocalTz = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string default_input_tz = 3;
 * @return {string}
 */
proto.pretransform.PreTransformExtractRequest.prototype.getDefaultInputTz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pretransform.PreTransformExtractRequest} returns this
 */
proto.pretransform.PreTransformExtractRequest.prototype.setDefaultInputTz = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pretransform.PreTransformExtractRequest} returns this
 */
proto.pretransform.PreTransformExtractRequest.prototype.clearDefaultInputTz = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pretransform.PreTransformExtractRequest.prototype.hasDefaultInputTz = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool preserve_interactivity = 4;
 * @return {boolean}
 */
proto.pretransform.PreTransformExtractRequest.prototype.getPreserveInteractivity = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pretransform.PreTransformExtractRequest} returns this
 */
proto.pretransform.PreTransformExtractRequest.prototype.setPreserveInteractivity = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated PreTransformInlineDataset inline_datasets = 5;
 * @return {!Array<!proto.pretransform.PreTransformInlineDataset>}
 */
proto.pretransform.PreTransformExtractRequest.prototype.getInlineDatasetsList = function() {
  return /** @type{!Array<!proto.pretransform.PreTransformInlineDataset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pretransform.PreTransformInlineDataset, 5));
};


/**
 * @param {!Array<!proto.pretransform.PreTransformInlineDataset>} value
 * @return {!proto.pretransform.PreTransformExtractRequest} returns this
*/
proto.pretransform.PreTransformExtractRequest.prototype.setInlineDatasetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pretransform.PreTransformInlineDataset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pretransform.PreTransformInlineDataset}
 */
proto.pretransform.PreTransformExtractRequest.prototype.addInlineDatasets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pretransform.PreTransformInlineDataset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pretransform.PreTransformExtractRequest} returns this
 */
proto.pretransform.PreTransformExtractRequest.prototype.clearInlineDatasetsList = function() {
  return this.setInlineDatasetsList([]);
};


goog.object.extend(exports, proto.pretransform);
