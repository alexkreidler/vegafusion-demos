// source: transforms.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var expression_pb = require('./expression_pb.js');
goog.object.extend(proto, expression_pb);
goog.exportSymbol('proto.transforms.Aggregate', null, global);
goog.exportSymbol('proto.transforms.AggregateOp', null, global);
goog.exportSymbol('proto.transforms.Bin', null, global);
goog.exportSymbol('proto.transforms.Collect', null, global);
goog.exportSymbol('proto.transforms.Extent', null, global);
goog.exportSymbol('proto.transforms.Filter', null, global);
goog.exportSymbol('proto.transforms.Fold', null, global);
goog.exportSymbol('proto.transforms.Formula', null, global);
goog.exportSymbol('proto.transforms.Identifier', null, global);
goog.exportSymbol('proto.transforms.Impute', null, global);
goog.exportSymbol('proto.transforms.ImputeMethod', null, global);
goog.exportSymbol('proto.transforms.JoinAggregate', null, global);
goog.exportSymbol('proto.transforms.Pivot', null, global);
goog.exportSymbol('proto.transforms.Project', null, global);
goog.exportSymbol('proto.transforms.Sequence', null, global);
goog.exportSymbol('proto.transforms.SortOrder', null, global);
goog.exportSymbol('proto.transforms.Stack', null, global);
goog.exportSymbol('proto.transforms.StackOffset', null, global);
goog.exportSymbol('proto.transforms.TimeUnit', null, global);
goog.exportSymbol('proto.transforms.TimeUnitTimeZone', null, global);
goog.exportSymbol('proto.transforms.TimeUnitUnit', null, global);
goog.exportSymbol('proto.transforms.Transform', null, global);
goog.exportSymbol('proto.transforms.Transform.TransformKindCase', null, global);
goog.exportSymbol('proto.transforms.TransformPipeline', null, global);
goog.exportSymbol('proto.transforms.Window', null, global);
goog.exportSymbol('proto.transforms.WindowFrame', null, global);
goog.exportSymbol('proto.transforms.WindowOp', null, global);
goog.exportSymbol('proto.transforms.WindowTransformOp', null, global);
goog.exportSymbol('proto.transforms.WindowTransformOp.OpCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transforms.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Filter.displayName = 'proto.transforms.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Formula = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transforms.Formula, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Formula.displayName = 'proto.transforms.Formula';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Extent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transforms.Extent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Extent.displayName = 'proto.transforms.Extent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Collect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.Collect.repeatedFields_, null);
};
goog.inherits(proto.transforms.Collect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Collect.displayName = 'proto.transforms.Collect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Bin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.Bin.repeatedFields_, null);
};
goog.inherits(proto.transforms.Bin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Bin.displayName = 'proto.transforms.Bin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Aggregate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.Aggregate.repeatedFields_, null);
};
goog.inherits(proto.transforms.Aggregate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Aggregate.displayName = 'proto.transforms.Aggregate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.JoinAggregate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.JoinAggregate.repeatedFields_, null);
};
goog.inherits(proto.transforms.JoinAggregate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.JoinAggregate.displayName = 'proto.transforms.JoinAggregate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.TimeUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.TimeUnit.repeatedFields_, null);
};
goog.inherits(proto.transforms.TimeUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.TimeUnit.displayName = 'proto.transforms.TimeUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.WindowTransformOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.transforms.WindowTransformOp.oneofGroups_);
};
goog.inherits(proto.transforms.WindowTransformOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.WindowTransformOp.displayName = 'proto.transforms.WindowTransformOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Window = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.Window.repeatedFields_, null);
};
goog.inherits(proto.transforms.Window, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Window.displayName = 'proto.transforms.Window';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.WindowFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transforms.WindowFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.WindowFrame.displayName = 'proto.transforms.WindowFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Project = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.Project.repeatedFields_, null);
};
goog.inherits(proto.transforms.Project, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Project.displayName = 'proto.transforms.Project';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Stack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.Stack.repeatedFields_, null);
};
goog.inherits(proto.transforms.Stack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Stack.displayName = 'proto.transforms.Stack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Impute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.Impute.repeatedFields_, null);
};
goog.inherits(proto.transforms.Impute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Impute.displayName = 'proto.transforms.Impute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Pivot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.Pivot.repeatedFields_, null);
};
goog.inherits(proto.transforms.Pivot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Pivot.displayName = 'proto.transforms.Pivot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Identifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transforms.Identifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Identifier.displayName = 'proto.transforms.Identifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Fold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.Fold.repeatedFields_, null);
};
goog.inherits(proto.transforms.Fold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Fold.displayName = 'proto.transforms.Fold';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Sequence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transforms.Sequence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Sequence.displayName = 'proto.transforms.Sequence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.transforms.Transform.oneofGroups_);
};
goog.inherits(proto.transforms.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.Transform.displayName = 'proto.transforms.Transform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transforms.TransformPipeline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transforms.TransformPipeline.repeatedFields_, null);
};
goog.inherits(proto.transforms.TransformPipeline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transforms.TransformPipeline.displayName = 'proto.transforms.TransformPipeline';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    expr: (f = msg.getExpr()) && expression_pb.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Filter}
 */
proto.transforms.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Filter;
  return proto.transforms.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Filter}
 */
proto.transforms.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new expression_pb.Expression;
      reader.readMessage(value,expression_pb.Expression.deserializeBinaryFromReader);
      msg.setExpr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      expression_pb.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional expression.Expression expr = 1;
 * @return {?proto.expression.Expression}
 */
proto.transforms.Filter.prototype.getExpr = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, expression_pb.Expression, 1));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.transforms.Filter} returns this
*/
proto.transforms.Filter.prototype.setExpr = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Filter} returns this
 */
proto.transforms.Filter.prototype.clearExpr = function() {
  return this.setExpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Filter.prototype.hasExpr = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Formula.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Formula.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Formula} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Formula.toObject = function(includeInstance, msg) {
  var f, obj = {
    expr: (f = msg.getExpr()) && expression_pb.Expression.toObject(includeInstance, f),
    as: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Formula}
 */
proto.transforms.Formula.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Formula;
  return proto.transforms.Formula.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Formula} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Formula}
 */
proto.transforms.Formula.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new expression_pb.Expression;
      reader.readMessage(value,expression_pb.Expression.deserializeBinaryFromReader);
      msg.setExpr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Formula.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Formula.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Formula} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Formula.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      expression_pb.Expression.serializeBinaryToWriter
    );
  }
  f = message.getAs();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional expression.Expression expr = 1;
 * @return {?proto.expression.Expression}
 */
proto.transforms.Formula.prototype.getExpr = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, expression_pb.Expression, 1));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.transforms.Formula} returns this
*/
proto.transforms.Formula.prototype.setExpr = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Formula} returns this
 */
proto.transforms.Formula.prototype.clearExpr = function() {
  return this.setExpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Formula.prototype.hasExpr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string as = 2;
 * @return {string}
 */
proto.transforms.Formula.prototype.getAs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Formula} returns this
 */
proto.transforms.Formula.prototype.setAs = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Extent.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Extent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Extent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Extent.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signal: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Extent}
 */
proto.transforms.Extent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Extent;
  return proto.transforms.Extent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Extent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Extent}
 */
proto.transforms.Extent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Extent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Extent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Extent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Extent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.transforms.Extent.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Extent} returns this
 */
proto.transforms.Extent.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signal = 2;
 * @return {string}
 */
proto.transforms.Extent.prototype.getSignal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Extent} returns this
 */
proto.transforms.Extent.prototype.setSignal = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Extent} returns this
 */
proto.transforms.Extent.prototype.clearSignal = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Extent.prototype.hasSignal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.Collect.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Collect.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Collect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Collect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Collect.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    orderList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Collect}
 */
proto.transforms.Collect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Collect;
  return proto.transforms.Collect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Collect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Collect}
 */
proto.transforms.Collect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.transforms.SortOrder>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOrder(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Collect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Collect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Collect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Collect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * repeated string fields = 1;
 * @return {!Array<string>}
 */
proto.transforms.Collect.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Collect} returns this
 */
proto.transforms.Collect.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Collect} returns this
 */
proto.transforms.Collect.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Collect} returns this
 */
proto.transforms.Collect.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * repeated SortOrder order = 2;
 * @return {!Array<!proto.transforms.SortOrder>}
 */
proto.transforms.Collect.prototype.getOrderList = function() {
  return /** @type {!Array<!proto.transforms.SortOrder>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.transforms.SortOrder>} value
 * @return {!proto.transforms.Collect} returns this
 */
proto.transforms.Collect.prototype.setOrderList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.transforms.SortOrder} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Collect} returns this
 */
proto.transforms.Collect.prototype.addOrder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Collect} returns this
 */
proto.transforms.Collect.prototype.clearOrderList = function() {
  return this.setOrderList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.Bin.repeatedFields_ = [10,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Bin.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Bin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Bin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Bin.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    extent: (f = msg.getExtent()) && expression_pb.Expression.toObject(includeInstance, f),
    signal: jspb.Message.getFieldWithDefault(msg, 3, ""),
    alias0: jspb.Message.getFieldWithDefault(msg, 4, ""),
    alias1: jspb.Message.getFieldWithDefault(msg, 5, ""),
    anchor: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    maxbins: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    base: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    step: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    stepsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 10)) == null ? undefined : f,
    span: (f = msg.getSpan()) && expression_pb.Expression.toObject(includeInstance, f),
    minstep: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    divideList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 13)) == null ? undefined : f,
    nice: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Bin}
 */
proto.transforms.Bin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Bin;
  return proto.transforms.Bin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Bin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Bin}
 */
proto.transforms.Bin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = new expression_pb.Expression;
      reader.readMessage(value,expression_pb.Expression.deserializeBinaryFromReader);
      msg.setExtent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignal(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias0(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias1(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAnchor(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxbins(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBase(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStep(value);
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSteps(values[i]);
      }
      break;
    case 11:
      var value = new expression_pb.Expression;
      reader.readMessage(value,expression_pb.Expression.deserializeBinaryFromReader);
      msg.setSpan(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinstep(value);
      break;
    case 13:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDivide(values[i]);
      }
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Bin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Bin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Bin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Bin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExtent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      expression_pb.Expression.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMaxbins();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getBase();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getStepsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      10,
      f
    );
  }
  f = message.getSpan();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      expression_pb.Expression.serializeBinaryToWriter
    );
  }
  f = message.getMinstep();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getDivideList();
  if (f.length > 0) {
    writer.writePackedDouble(
      13,
      f
    );
  }
  f = message.getNice();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.transforms.Bin.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional expression.Expression extent = 2;
 * @return {?proto.expression.Expression}
 */
proto.transforms.Bin.prototype.getExtent = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, expression_pb.Expression, 2));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.transforms.Bin} returns this
*/
proto.transforms.Bin.prototype.setExtent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.clearExtent = function() {
  return this.setExtent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Bin.prototype.hasExtent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string signal = 3;
 * @return {string}
 */
proto.transforms.Bin.prototype.getSignal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setSignal = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.clearSignal = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Bin.prototype.hasSignal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string alias_0 = 4;
 * @return {string}
 */
proto.transforms.Bin.prototype.getAlias0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setAlias0 = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.clearAlias0 = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Bin.prototype.hasAlias0 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string alias_1 = 5;
 * @return {string}
 */
proto.transforms.Bin.prototype.getAlias1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setAlias1 = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.clearAlias1 = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Bin.prototype.hasAlias1 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double anchor = 6;
 * @return {number}
 */
proto.transforms.Bin.prototype.getAnchor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setAnchor = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.clearAnchor = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Bin.prototype.hasAnchor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double maxbins = 7;
 * @return {number}
 */
proto.transforms.Bin.prototype.getMaxbins = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setMaxbins = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double base = 8;
 * @return {number}
 */
proto.transforms.Bin.prototype.getBase = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setBase = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double step = 9;
 * @return {number}
 */
proto.transforms.Bin.prototype.getStep = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setStep = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.clearStep = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Bin.prototype.hasStep = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated double steps = 10;
 * @return {!Array<number>}
 */
proto.transforms.Bin.prototype.getStepsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setStepsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.addSteps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.clearStepsList = function() {
  return this.setStepsList([]);
};


/**
 * optional expression.Expression span = 11;
 * @return {?proto.expression.Expression}
 */
proto.transforms.Bin.prototype.getSpan = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, expression_pb.Expression, 11));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.transforms.Bin} returns this
*/
proto.transforms.Bin.prototype.setSpan = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.clearSpan = function() {
  return this.setSpan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Bin.prototype.hasSpan = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double minstep = 12;
 * @return {number}
 */
proto.transforms.Bin.prototype.getMinstep = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setMinstep = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * repeated double divide = 13;
 * @return {!Array<number>}
 */
proto.transforms.Bin.prototype.getDivideList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setDivideList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.addDivide = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.clearDivideList = function() {
  return this.setDivideList([]);
};


/**
 * optional bool nice = 14;
 * @return {boolean}
 */
proto.transforms.Bin.prototype.getNice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.transforms.Bin} returns this
 */
proto.transforms.Bin.prototype.setNice = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.Aggregate.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Aggregate.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Aggregate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Aggregate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Aggregate.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupbyList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    aliasesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    opsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Aggregate}
 */
proto.transforms.Aggregate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Aggregate;
  return proto.transforms.Aggregate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Aggregate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Aggregate}
 */
proto.transforms.Aggregate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupby(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAliases(value);
      break;
    case 4:
      var values = /** @type {!Array<!proto.transforms.AggregateOp>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOps(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Aggregate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Aggregate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Aggregate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Aggregate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAliasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getOpsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
};


/**
 * repeated string groupby = 1;
 * @return {!Array<string>}
 */
proto.transforms.Aggregate.prototype.getGroupbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.setGroupbyList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.addGroupby = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.clearGroupbyList = function() {
  return this.setGroupbyList([]);
};


/**
 * repeated string fields = 2;
 * @return {!Array<string>}
 */
proto.transforms.Aggregate.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * repeated string aliases = 3;
 * @return {!Array<string>}
 */
proto.transforms.Aggregate.prototype.getAliasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.setAliasesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.addAliases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.clearAliasesList = function() {
  return this.setAliasesList([]);
};


/**
 * repeated AggregateOp ops = 4;
 * @return {!Array<!proto.transforms.AggregateOp>}
 */
proto.transforms.Aggregate.prototype.getOpsList = function() {
  return /** @type {!Array<!proto.transforms.AggregateOp>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.transforms.AggregateOp>} value
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.setOpsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.transforms.AggregateOp} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.addOps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Aggregate} returns this
 */
proto.transforms.Aggregate.prototype.clearOpsList = function() {
  return this.setOpsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.JoinAggregate.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.JoinAggregate.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.JoinAggregate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.JoinAggregate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.JoinAggregate.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupbyList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    opsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    aliasesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.JoinAggregate}
 */
proto.transforms.JoinAggregate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.JoinAggregate;
  return proto.transforms.JoinAggregate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.JoinAggregate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.JoinAggregate}
 */
proto.transforms.JoinAggregate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupby(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.transforms.AggregateOp>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOps(values[i]);
      }
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addAliases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.JoinAggregate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.JoinAggregate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.JoinAggregate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.JoinAggregate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getOpsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getAliasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * repeated string groupby = 1;
 * @return {!Array<string>}
 */
proto.transforms.JoinAggregate.prototype.getGroupbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.setGroupbyList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.addGroupby = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.clearGroupbyList = function() {
  return this.setGroupbyList([]);
};


/**
 * repeated string fields = 2;
 * @return {!Array<string>}
 */
proto.transforms.JoinAggregate.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * repeated AggregateOp ops = 3;
 * @return {!Array<!proto.transforms.AggregateOp>}
 */
proto.transforms.JoinAggregate.prototype.getOpsList = function() {
  return /** @type {!Array<!proto.transforms.AggregateOp>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.transforms.AggregateOp>} value
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.setOpsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.transforms.AggregateOp} value
 * @param {number=} opt_index
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.addOps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.clearOpsList = function() {
  return this.setOpsList([]);
};


/**
 * repeated string aliases = 4;
 * @return {!Array<string>}
 */
proto.transforms.JoinAggregate.prototype.getAliasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.setAliasesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.addAliases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.JoinAggregate} returns this
 */
proto.transforms.JoinAggregate.prototype.clearAliasesList = function() {
  return this.setAliasesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.TimeUnit.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.TimeUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.TimeUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.TimeUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.TimeUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    unitsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    signal: jspb.Message.getFieldWithDefault(msg, 3, ""),
    alias0: jspb.Message.getFieldWithDefault(msg, 4, ""),
    alias1: jspb.Message.getFieldWithDefault(msg, 5, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.TimeUnit}
 */
proto.transforms.TimeUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.TimeUnit;
  return proto.transforms.TimeUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.TimeUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.TimeUnit}
 */
proto.transforms.TimeUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.transforms.TimeUnitUnit>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addUnits(values[i]);
      }
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignal(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias0(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias1(value);
      break;
    case 6:
      var value = /** @type {!proto.transforms.TimeUnitTimeZone} */ (reader.readEnum());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.TimeUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.TimeUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.TimeUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.TimeUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUnitsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {!proto.transforms.TimeUnitTimeZone} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.transforms.TimeUnit.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated TimeUnitUnit units = 2;
 * @return {!Array<!proto.transforms.TimeUnitUnit>}
 */
proto.transforms.TimeUnit.prototype.getUnitsList = function() {
  return /** @type {!Array<!proto.transforms.TimeUnitUnit>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.transforms.TimeUnitUnit>} value
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.setUnitsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.transforms.TimeUnitUnit} value
 * @param {number=} opt_index
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.addUnits = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.clearUnitsList = function() {
  return this.setUnitsList([]);
};


/**
 * optional string signal = 3;
 * @return {string}
 */
proto.transforms.TimeUnit.prototype.getSignal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.setSignal = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.clearSignal = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.TimeUnit.prototype.hasSignal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string alias_0 = 4;
 * @return {string}
 */
proto.transforms.TimeUnit.prototype.getAlias0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.setAlias0 = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.clearAlias0 = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.TimeUnit.prototype.hasAlias0 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string alias_1 = 5;
 * @return {string}
 */
proto.transforms.TimeUnit.prototype.getAlias1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.setAlias1 = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.clearAlias1 = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.TimeUnit.prototype.hasAlias1 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TimeUnitTimeZone timezone = 6;
 * @return {!proto.transforms.TimeUnitTimeZone}
 */
proto.transforms.TimeUnit.prototype.getTimezone = function() {
  return /** @type {!proto.transforms.TimeUnitTimeZone} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.transforms.TimeUnitTimeZone} value
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.setTimezone = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.TimeUnit} returns this
 */
proto.transforms.TimeUnit.prototype.clearTimezone = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.TimeUnit.prototype.hasTimezone = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.transforms.WindowTransformOp.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.transforms.WindowTransformOp.OpCase = {
  OP_NOT_SET: 0,
  AGGREGATE_OP: 1,
  WINDOW_OP: 2
};

/**
 * @return {proto.transforms.WindowTransformOp.OpCase}
 */
proto.transforms.WindowTransformOp.prototype.getOpCase = function() {
  return /** @type {proto.transforms.WindowTransformOp.OpCase} */(jspb.Message.computeOneofCase(this, proto.transforms.WindowTransformOp.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.WindowTransformOp.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.WindowTransformOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.WindowTransformOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.WindowTransformOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    aggregateOp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    windowOp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.WindowTransformOp}
 */
proto.transforms.WindowTransformOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.WindowTransformOp;
  return proto.transforms.WindowTransformOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.WindowTransformOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.WindowTransformOp}
 */
proto.transforms.WindowTransformOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.transforms.AggregateOp} */ (reader.readEnum());
      msg.setAggregateOp(value);
      break;
    case 2:
      var value = /** @type {!proto.transforms.WindowOp} */ (reader.readEnum());
      msg.setWindowOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.WindowTransformOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.WindowTransformOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.WindowTransformOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.WindowTransformOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.transforms.AggregateOp} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.transforms.WindowOp} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional AggregateOp aggregate_op = 1;
 * @return {!proto.transforms.AggregateOp}
 */
proto.transforms.WindowTransformOp.prototype.getAggregateOp = function() {
  return /** @type {!proto.transforms.AggregateOp} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.transforms.AggregateOp} value
 * @return {!proto.transforms.WindowTransformOp} returns this
 */
proto.transforms.WindowTransformOp.prototype.setAggregateOp = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.transforms.WindowTransformOp.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.WindowTransformOp} returns this
 */
proto.transforms.WindowTransformOp.prototype.clearAggregateOp = function() {
  return jspb.Message.setOneofField(this, 1, proto.transforms.WindowTransformOp.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.WindowTransformOp.prototype.hasAggregateOp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WindowOp window_op = 2;
 * @return {!proto.transforms.WindowOp}
 */
proto.transforms.WindowTransformOp.prototype.getWindowOp = function() {
  return /** @type {!proto.transforms.WindowOp} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.transforms.WindowOp} value
 * @return {!proto.transforms.WindowTransformOp} returns this
 */
proto.transforms.WindowTransformOp.prototype.setWindowOp = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.transforms.WindowTransformOp.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.WindowTransformOp} returns this
 */
proto.transforms.WindowTransformOp.prototype.clearWindowOp = function() {
  return jspb.Message.setOneofField(this, 2, proto.transforms.WindowTransformOp.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.WindowTransformOp.prototype.hasWindowOp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.Window.repeatedFields_ = [1,2,3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Window.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Window.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Window} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Window.toObject = function(includeInstance, msg) {
  var f, obj = {
    sortList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    sortFieldsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    groupbyList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    opsList: jspb.Message.toObjectList(msg.getOpsList(),
    proto.transforms.WindowTransformOp.toObject, includeInstance),
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    paramsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    aliasesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    frame: (f = msg.getFrame()) && proto.transforms.WindowFrame.toObject(includeInstance, f),
    ignorePeers: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Window}
 */
proto.transforms.Window.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Window;
  return proto.transforms.Window.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Window} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Window}
 */
proto.transforms.Window.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.transforms.SortOrder>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSort(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSortFields(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupby(value);
      break;
    case 4:
      var value = new proto.transforms.WindowTransformOp;
      reader.readMessage(value,proto.transforms.WindowTransformOp.deserializeBinaryFromReader);
      msg.addOps(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParams(values[i]);
      }
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addAliases(value);
      break;
    case 8:
      var value = new proto.transforms.WindowFrame;
      reader.readMessage(value,proto.transforms.WindowFrame.deserializeBinaryFromReader);
      msg.setFrame(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgnorePeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Window.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Window.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Window} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Window.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSortList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getSortFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getGroupbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getOpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.transforms.WindowTransformOp.serializeBinaryToWriter
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      6,
      f
    );
  }
  f = message.getAliasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getFrame();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.transforms.WindowFrame.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * repeated SortOrder sort = 1;
 * @return {!Array<!proto.transforms.SortOrder>}
 */
proto.transforms.Window.prototype.getSortList = function() {
  return /** @type {!Array<!proto.transforms.SortOrder>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.transforms.SortOrder>} value
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.setSortList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.transforms.SortOrder} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.addSort = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.clearSortList = function() {
  return this.setSortList([]);
};


/**
 * repeated string sort_fields = 2;
 * @return {!Array<string>}
 */
proto.transforms.Window.prototype.getSortFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.setSortFieldsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.addSortFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.clearSortFieldsList = function() {
  return this.setSortFieldsList([]);
};


/**
 * repeated string groupby = 3;
 * @return {!Array<string>}
 */
proto.transforms.Window.prototype.getGroupbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.setGroupbyList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.addGroupby = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.clearGroupbyList = function() {
  return this.setGroupbyList([]);
};


/**
 * repeated WindowTransformOp ops = 4;
 * @return {!Array<!proto.transforms.WindowTransformOp>}
 */
proto.transforms.Window.prototype.getOpsList = function() {
  return /** @type{!Array<!proto.transforms.WindowTransformOp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.transforms.WindowTransformOp, 4));
};


/**
 * @param {!Array<!proto.transforms.WindowTransformOp>} value
 * @return {!proto.transforms.Window} returns this
*/
proto.transforms.Window.prototype.setOpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.transforms.WindowTransformOp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.transforms.WindowTransformOp}
 */
proto.transforms.Window.prototype.addOps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.transforms.WindowTransformOp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.clearOpsList = function() {
  return this.setOpsList([]);
};


/**
 * repeated string fields = 5;
 * @return {!Array<string>}
 */
proto.transforms.Window.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * repeated double params = 6;
 * @return {!Array<number>}
 */
proto.transforms.Window.prototype.getParamsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.setParamsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.addParams = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.clearParamsList = function() {
  return this.setParamsList([]);
};


/**
 * repeated string aliases = 7;
 * @return {!Array<string>}
 */
proto.transforms.Window.prototype.getAliasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.setAliasesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.addAliases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.clearAliasesList = function() {
  return this.setAliasesList([]);
};


/**
 * optional WindowFrame frame = 8;
 * @return {?proto.transforms.WindowFrame}
 */
proto.transforms.Window.prototype.getFrame = function() {
  return /** @type{?proto.transforms.WindowFrame} */ (
    jspb.Message.getWrapperField(this, proto.transforms.WindowFrame, 8));
};


/**
 * @param {?proto.transforms.WindowFrame|undefined} value
 * @return {!proto.transforms.Window} returns this
*/
proto.transforms.Window.prototype.setFrame = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.clearFrame = function() {
  return this.setFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Window.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool ignore_peers = 9;
 * @return {boolean}
 */
proto.transforms.Window.prototype.getIgnorePeers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.setIgnorePeers = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Window} returns this
 */
proto.transforms.Window.prototype.clearIgnorePeers = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Window.prototype.hasIgnorePeers = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.WindowFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.WindowFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.WindowFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.WindowFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: jspb.Message.getFieldWithDefault(msg, 1, 0),
    end: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.WindowFrame}
 */
proto.transforms.WindowFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.WindowFrame;
  return proto.transforms.WindowFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.WindowFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.WindowFrame}
 */
proto.transforms.WindowFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.WindowFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.WindowFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.WindowFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.WindowFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 start = 1;
 * @return {number}
 */
proto.transforms.WindowFrame.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.transforms.WindowFrame} returns this
 */
proto.transforms.WindowFrame.prototype.setStart = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.WindowFrame} returns this
 */
proto.transforms.WindowFrame.prototype.clearStart = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.WindowFrame.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 end = 2;
 * @return {number}
 */
proto.transforms.WindowFrame.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.transforms.WindowFrame} returns this
 */
proto.transforms.WindowFrame.prototype.setEnd = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.WindowFrame} returns this
 */
proto.transforms.WindowFrame.prototype.clearEnd = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.WindowFrame.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.Project.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Project.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Project.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Project} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Project.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Project}
 */
proto.transforms.Project.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Project;
  return proto.transforms.Project.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Project} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Project}
 */
proto.transforms.Project.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Project.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Project.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Project} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Project.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string fields = 1;
 * @return {!Array<string>}
 */
proto.transforms.Project.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Project} returns this
 */
proto.transforms.Project.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Project} returns this
 */
proto.transforms.Project.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Project} returns this
 */
proto.transforms.Project.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.Stack.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Stack.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Stack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Stack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Stack.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sortList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    sortFieldsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    groupbyList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    alias0: jspb.Message.getFieldWithDefault(msg, 6, ""),
    alias1: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Stack}
 */
proto.transforms.Stack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Stack;
  return proto.transforms.Stack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Stack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Stack}
 */
proto.transforms.Stack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {!proto.transforms.StackOffset} */ (reader.readEnum());
      msg.setOffset(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.transforms.SortOrder>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSort(values[i]);
      }
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSortFields(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupby(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias0(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Stack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Stack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Stack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Stack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSortList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getSortFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getGroupbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.transforms.Stack.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StackOffset offset = 2;
 * @return {!proto.transforms.StackOffset}
 */
proto.transforms.Stack.prototype.getOffset = function() {
  return /** @type {!proto.transforms.StackOffset} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.transforms.StackOffset} value
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.setOffset = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated SortOrder sort = 3;
 * @return {!Array<!proto.transforms.SortOrder>}
 */
proto.transforms.Stack.prototype.getSortList = function() {
  return /** @type {!Array<!proto.transforms.SortOrder>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.transforms.SortOrder>} value
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.setSortList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.transforms.SortOrder} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.addSort = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.clearSortList = function() {
  return this.setSortList([]);
};


/**
 * repeated string sort_fields = 4;
 * @return {!Array<string>}
 */
proto.transforms.Stack.prototype.getSortFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.setSortFieldsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.addSortFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.clearSortFieldsList = function() {
  return this.setSortFieldsList([]);
};


/**
 * repeated string groupby = 5;
 * @return {!Array<string>}
 */
proto.transforms.Stack.prototype.getGroupbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.setGroupbyList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.addGroupby = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.clearGroupbyList = function() {
  return this.setGroupbyList([]);
};


/**
 * optional string alias_0 = 6;
 * @return {string}
 */
proto.transforms.Stack.prototype.getAlias0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.setAlias0 = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.clearAlias0 = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Stack.prototype.hasAlias0 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string alias_1 = 7;
 * @return {string}
 */
proto.transforms.Stack.prototype.getAlias1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.setAlias1 = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Stack} returns this
 */
proto.transforms.Stack.prototype.clearAlias1 = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Stack.prototype.hasAlias1 = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.Impute.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Impute.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Impute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Impute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Impute.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupbyList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    valueJson: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Impute}
 */
proto.transforms.Impute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Impute;
  return proto.transforms.Impute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Impute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Impute}
 */
proto.transforms.Impute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!proto.transforms.ImputeMethod} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupby(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Impute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Impute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Impute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Impute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getGroupbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.transforms.Impute.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Impute} returns this
 */
proto.transforms.Impute.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.transforms.Impute.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Impute} returns this
 */
proto.transforms.Impute.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ImputeMethod method = 3;
 * @return {!proto.transforms.ImputeMethod}
 */
proto.transforms.Impute.prototype.getMethod = function() {
  return /** @type {!proto.transforms.ImputeMethod} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.transforms.ImputeMethod} value
 * @return {!proto.transforms.Impute} returns this
 */
proto.transforms.Impute.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated string groupby = 4;
 * @return {!Array<string>}
 */
proto.transforms.Impute.prototype.getGroupbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Impute} returns this
 */
proto.transforms.Impute.prototype.setGroupbyList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Impute} returns this
 */
proto.transforms.Impute.prototype.addGroupby = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Impute} returns this
 */
proto.transforms.Impute.prototype.clearGroupbyList = function() {
  return this.setGroupbyList([]);
};


/**
 * optional string value_json = 5;
 * @return {string}
 */
proto.transforms.Impute.prototype.getValueJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Impute} returns this
 */
proto.transforms.Impute.prototype.setValueJson = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Impute} returns this
 */
proto.transforms.Impute.prototype.clearValueJson = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Impute.prototype.hasValueJson = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.Pivot.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Pivot.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Pivot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Pivot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Pivot.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupbyList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    op: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Pivot}
 */
proto.transforms.Pivot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Pivot;
  return proto.transforms.Pivot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Pivot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Pivot}
 */
proto.transforms.Pivot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupby(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {!proto.transforms.AggregateOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Pivot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Pivot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Pivot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Pivot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {!proto.transforms.AggregateOp} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.transforms.Pivot.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Pivot} returns this
 */
proto.transforms.Pivot.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.transforms.Pivot.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Pivot} returns this
 */
proto.transforms.Pivot.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string groupby = 3;
 * @return {!Array<string>}
 */
proto.transforms.Pivot.prototype.getGroupbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Pivot} returns this
 */
proto.transforms.Pivot.prototype.setGroupbyList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Pivot} returns this
 */
proto.transforms.Pivot.prototype.addGroupby = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Pivot} returns this
 */
proto.transforms.Pivot.prototype.clearGroupbyList = function() {
  return this.setGroupbyList([]);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.transforms.Pivot.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.transforms.Pivot} returns this
 */
proto.transforms.Pivot.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Pivot} returns this
 */
proto.transforms.Pivot.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Pivot.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AggregateOp op = 5;
 * @return {!proto.transforms.AggregateOp}
 */
proto.transforms.Pivot.prototype.getOp = function() {
  return /** @type {!proto.transforms.AggregateOp} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.transforms.AggregateOp} value
 * @return {!proto.transforms.Pivot} returns this
 */
proto.transforms.Pivot.prototype.setOp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Pivot} returns this
 */
proto.transforms.Pivot.prototype.clearOp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Pivot.prototype.hasOp = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Identifier.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Identifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Identifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Identifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    as: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Identifier}
 */
proto.transforms.Identifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Identifier;
  return proto.transforms.Identifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Identifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Identifier}
 */
proto.transforms.Identifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Identifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Identifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Identifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Identifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAs();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string as = 1;
 * @return {string}
 */
proto.transforms.Identifier.prototype.getAs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Identifier} returns this
 */
proto.transforms.Identifier.prototype.setAs = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.Fold.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Fold.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Fold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Fold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Fold.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    asList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Fold}
 */
proto.transforms.Fold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Fold;
  return proto.transforms.Fold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Fold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Fold}
 */
proto.transforms.Fold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Fold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Fold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Fold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Fold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string fields = 1;
 * @return {!Array<string>}
 */
proto.transforms.Fold.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Fold} returns this
 */
proto.transforms.Fold.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Fold} returns this
 */
proto.transforms.Fold.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Fold} returns this
 */
proto.transforms.Fold.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * repeated string as = 2;
 * @return {!Array<string>}
 */
proto.transforms.Fold.prototype.getAsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.transforms.Fold} returns this
 */
proto.transforms.Fold.prototype.setAsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.transforms.Fold} returns this
 */
proto.transforms.Fold.prototype.addAs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.Fold} returns this
 */
proto.transforms.Fold.prototype.clearAsList = function() {
  return this.setAsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Sequence.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Sequence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Sequence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Sequence.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && expression_pb.Expression.toObject(includeInstance, f),
    stop: (f = msg.getStop()) && expression_pb.Expression.toObject(includeInstance, f),
    step: (f = msg.getStep()) && expression_pb.Expression.toObject(includeInstance, f),
    as: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Sequence}
 */
proto.transforms.Sequence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Sequence;
  return proto.transforms.Sequence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Sequence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Sequence}
 */
proto.transforms.Sequence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new expression_pb.Expression;
      reader.readMessage(value,expression_pb.Expression.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new expression_pb.Expression;
      reader.readMessage(value,expression_pb.Expression.deserializeBinaryFromReader);
      msg.setStop(value);
      break;
    case 3:
      var value = new expression_pb.Expression;
      reader.readMessage(value,expression_pb.Expression.deserializeBinaryFromReader);
      msg.setStep(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Sequence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Sequence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Sequence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Sequence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      expression_pb.Expression.serializeBinaryToWriter
    );
  }
  f = message.getStop();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      expression_pb.Expression.serializeBinaryToWriter
    );
  }
  f = message.getStep();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      expression_pb.Expression.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional expression.Expression start = 1;
 * @return {?proto.expression.Expression}
 */
proto.transforms.Sequence.prototype.getStart = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, expression_pb.Expression, 1));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.transforms.Sequence} returns this
*/
proto.transforms.Sequence.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Sequence} returns this
 */
proto.transforms.Sequence.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Sequence.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional expression.Expression stop = 2;
 * @return {?proto.expression.Expression}
 */
proto.transforms.Sequence.prototype.getStop = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, expression_pb.Expression, 2));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.transforms.Sequence} returns this
*/
proto.transforms.Sequence.prototype.setStop = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Sequence} returns this
 */
proto.transforms.Sequence.prototype.clearStop = function() {
  return this.setStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Sequence.prototype.hasStop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional expression.Expression step = 3;
 * @return {?proto.expression.Expression}
 */
proto.transforms.Sequence.prototype.getStep = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, expression_pb.Expression, 3));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.transforms.Sequence} returns this
*/
proto.transforms.Sequence.prototype.setStep = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Sequence} returns this
 */
proto.transforms.Sequence.prototype.clearStep = function() {
  return this.setStep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Sequence.prototype.hasStep = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string as = 4;
 * @return {string}
 */
proto.transforms.Sequence.prototype.getAs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.transforms.Sequence} returns this
 */
proto.transforms.Sequence.prototype.setAs = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.transforms.Sequence} returns this
 */
proto.transforms.Sequence.prototype.clearAs = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Sequence.prototype.hasAs = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.transforms.Transform.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]];

/**
 * @enum {number}
 */
proto.transforms.Transform.TransformKindCase = {
  TRANSFORM_KIND_NOT_SET: 0,
  FILTER: 1,
  EXTENT: 2,
  FORMULA: 3,
  BIN: 4,
  AGGREGATE: 5,
  COLLECT: 6,
  TIMEUNIT: 7,
  JOINAGGREGATE: 8,
  WINDOW: 9,
  PROJECT: 10,
  STACK: 11,
  IMPUTE: 12,
  PIVOT: 13,
  IDENTIFIER: 14,
  FOLD: 15,
  SEQUENCE: 16
};

/**
 * @return {proto.transforms.Transform.TransformKindCase}
 */
proto.transforms.Transform.prototype.getTransformKindCase = function() {
  return /** @type {proto.transforms.Transform.TransformKindCase} */(jspb.Message.computeOneofCase(this, proto.transforms.Transform.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.transforms.Filter.toObject(includeInstance, f),
    extent: (f = msg.getExtent()) && proto.transforms.Extent.toObject(includeInstance, f),
    formula: (f = msg.getFormula()) && proto.transforms.Formula.toObject(includeInstance, f),
    bin: (f = msg.getBin()) && proto.transforms.Bin.toObject(includeInstance, f),
    aggregate: (f = msg.getAggregate()) && proto.transforms.Aggregate.toObject(includeInstance, f),
    collect: (f = msg.getCollect()) && proto.transforms.Collect.toObject(includeInstance, f),
    timeunit: (f = msg.getTimeunit()) && proto.transforms.TimeUnit.toObject(includeInstance, f),
    joinaggregate: (f = msg.getJoinaggregate()) && proto.transforms.JoinAggregate.toObject(includeInstance, f),
    window: (f = msg.getWindow()) && proto.transforms.Window.toObject(includeInstance, f),
    project: (f = msg.getProject()) && proto.transforms.Project.toObject(includeInstance, f),
    stack: (f = msg.getStack()) && proto.transforms.Stack.toObject(includeInstance, f),
    impute: (f = msg.getImpute()) && proto.transforms.Impute.toObject(includeInstance, f),
    pivot: (f = msg.getPivot()) && proto.transforms.Pivot.toObject(includeInstance, f),
    identifier: (f = msg.getIdentifier()) && proto.transforms.Identifier.toObject(includeInstance, f),
    fold: (f = msg.getFold()) && proto.transforms.Fold.toObject(includeInstance, f),
    sequence: (f = msg.getSequence()) && proto.transforms.Sequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.Transform}
 */
proto.transforms.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.Transform;
  return proto.transforms.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.Transform}
 */
proto.transforms.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.transforms.Filter;
      reader.readMessage(value,proto.transforms.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = new proto.transforms.Extent;
      reader.readMessage(value,proto.transforms.Extent.deserializeBinaryFromReader);
      msg.setExtent(value);
      break;
    case 3:
      var value = new proto.transforms.Formula;
      reader.readMessage(value,proto.transforms.Formula.deserializeBinaryFromReader);
      msg.setFormula(value);
      break;
    case 4:
      var value = new proto.transforms.Bin;
      reader.readMessage(value,proto.transforms.Bin.deserializeBinaryFromReader);
      msg.setBin(value);
      break;
    case 5:
      var value = new proto.transforms.Aggregate;
      reader.readMessage(value,proto.transforms.Aggregate.deserializeBinaryFromReader);
      msg.setAggregate(value);
      break;
    case 6:
      var value = new proto.transforms.Collect;
      reader.readMessage(value,proto.transforms.Collect.deserializeBinaryFromReader);
      msg.setCollect(value);
      break;
    case 7:
      var value = new proto.transforms.TimeUnit;
      reader.readMessage(value,proto.transforms.TimeUnit.deserializeBinaryFromReader);
      msg.setTimeunit(value);
      break;
    case 8:
      var value = new proto.transforms.JoinAggregate;
      reader.readMessage(value,proto.transforms.JoinAggregate.deserializeBinaryFromReader);
      msg.setJoinaggregate(value);
      break;
    case 9:
      var value = new proto.transforms.Window;
      reader.readMessage(value,proto.transforms.Window.deserializeBinaryFromReader);
      msg.setWindow(value);
      break;
    case 10:
      var value = new proto.transforms.Project;
      reader.readMessage(value,proto.transforms.Project.deserializeBinaryFromReader);
      msg.setProject(value);
      break;
    case 11:
      var value = new proto.transforms.Stack;
      reader.readMessage(value,proto.transforms.Stack.deserializeBinaryFromReader);
      msg.setStack(value);
      break;
    case 12:
      var value = new proto.transforms.Impute;
      reader.readMessage(value,proto.transforms.Impute.deserializeBinaryFromReader);
      msg.setImpute(value);
      break;
    case 13:
      var value = new proto.transforms.Pivot;
      reader.readMessage(value,proto.transforms.Pivot.deserializeBinaryFromReader);
      msg.setPivot(value);
      break;
    case 14:
      var value = new proto.transforms.Identifier;
      reader.readMessage(value,proto.transforms.Identifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 15:
      var value = new proto.transforms.Fold;
      reader.readMessage(value,proto.transforms.Fold.deserializeBinaryFromReader);
      msg.setFold(value);
      break;
    case 16:
      var value = new proto.transforms.Sequence;
      reader.readMessage(value,proto.transforms.Sequence.deserializeBinaryFromReader);
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.transforms.Filter.serializeBinaryToWriter
    );
  }
  f = message.getExtent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.transforms.Extent.serializeBinaryToWriter
    );
  }
  f = message.getFormula();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.transforms.Formula.serializeBinaryToWriter
    );
  }
  f = message.getBin();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.transforms.Bin.serializeBinaryToWriter
    );
  }
  f = message.getAggregate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.transforms.Aggregate.serializeBinaryToWriter
    );
  }
  f = message.getCollect();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.transforms.Collect.serializeBinaryToWriter
    );
  }
  f = message.getTimeunit();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.transforms.TimeUnit.serializeBinaryToWriter
    );
  }
  f = message.getJoinaggregate();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.transforms.JoinAggregate.serializeBinaryToWriter
    );
  }
  f = message.getWindow();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.transforms.Window.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.transforms.Project.serializeBinaryToWriter
    );
  }
  f = message.getStack();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.transforms.Stack.serializeBinaryToWriter
    );
  }
  f = message.getImpute();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.transforms.Impute.serializeBinaryToWriter
    );
  }
  f = message.getPivot();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.transforms.Pivot.serializeBinaryToWriter
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.transforms.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getFold();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.transforms.Fold.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.transforms.Sequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional Filter filter = 1;
 * @return {?proto.transforms.Filter}
 */
proto.transforms.Transform.prototype.getFilter = function() {
  return /** @type{?proto.transforms.Filter} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Filter, 1));
};


/**
 * @param {?proto.transforms.Filter|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Extent extent = 2;
 * @return {?proto.transforms.Extent}
 */
proto.transforms.Transform.prototype.getExtent = function() {
  return /** @type{?proto.transforms.Extent} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Extent, 2));
};


/**
 * @param {?proto.transforms.Extent|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setExtent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearExtent = function() {
  return this.setExtent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasExtent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Formula formula = 3;
 * @return {?proto.transforms.Formula}
 */
proto.transforms.Transform.prototype.getFormula = function() {
  return /** @type{?proto.transforms.Formula} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Formula, 3));
};


/**
 * @param {?proto.transforms.Formula|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setFormula = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearFormula = function() {
  return this.setFormula(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasFormula = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Bin bin = 4;
 * @return {?proto.transforms.Bin}
 */
proto.transforms.Transform.prototype.getBin = function() {
  return /** @type{?proto.transforms.Bin} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Bin, 4));
};


/**
 * @param {?proto.transforms.Bin|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setBin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearBin = function() {
  return this.setBin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasBin = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Aggregate aggregate = 5;
 * @return {?proto.transforms.Aggregate}
 */
proto.transforms.Transform.prototype.getAggregate = function() {
  return /** @type{?proto.transforms.Aggregate} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Aggregate, 5));
};


/**
 * @param {?proto.transforms.Aggregate|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setAggregate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearAggregate = function() {
  return this.setAggregate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasAggregate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Collect collect = 6;
 * @return {?proto.transforms.Collect}
 */
proto.transforms.Transform.prototype.getCollect = function() {
  return /** @type{?proto.transforms.Collect} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Collect, 6));
};


/**
 * @param {?proto.transforms.Collect|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setCollect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearCollect = function() {
  return this.setCollect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasCollect = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TimeUnit timeunit = 7;
 * @return {?proto.transforms.TimeUnit}
 */
proto.transforms.Transform.prototype.getTimeunit = function() {
  return /** @type{?proto.transforms.TimeUnit} */ (
    jspb.Message.getWrapperField(this, proto.transforms.TimeUnit, 7));
};


/**
 * @param {?proto.transforms.TimeUnit|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setTimeunit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearTimeunit = function() {
  return this.setTimeunit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasTimeunit = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional JoinAggregate joinaggregate = 8;
 * @return {?proto.transforms.JoinAggregate}
 */
proto.transforms.Transform.prototype.getJoinaggregate = function() {
  return /** @type{?proto.transforms.JoinAggregate} */ (
    jspb.Message.getWrapperField(this, proto.transforms.JoinAggregate, 8));
};


/**
 * @param {?proto.transforms.JoinAggregate|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setJoinaggregate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearJoinaggregate = function() {
  return this.setJoinaggregate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasJoinaggregate = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Window window = 9;
 * @return {?proto.transforms.Window}
 */
proto.transforms.Transform.prototype.getWindow = function() {
  return /** @type{?proto.transforms.Window} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Window, 9));
};


/**
 * @param {?proto.transforms.Window|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setWindow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearWindow = function() {
  return this.setWindow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasWindow = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Project project = 10;
 * @return {?proto.transforms.Project}
 */
proto.transforms.Transform.prototype.getProject = function() {
  return /** @type{?proto.transforms.Project} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Project, 10));
};


/**
 * @param {?proto.transforms.Project|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setProject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearProject = function() {
  return this.setProject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasProject = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Stack stack = 11;
 * @return {?proto.transforms.Stack}
 */
proto.transforms.Transform.prototype.getStack = function() {
  return /** @type{?proto.transforms.Stack} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Stack, 11));
};


/**
 * @param {?proto.transforms.Stack|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setStack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearStack = function() {
  return this.setStack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasStack = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Impute impute = 12;
 * @return {?proto.transforms.Impute}
 */
proto.transforms.Transform.prototype.getImpute = function() {
  return /** @type{?proto.transforms.Impute} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Impute, 12));
};


/**
 * @param {?proto.transforms.Impute|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setImpute = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearImpute = function() {
  return this.setImpute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasImpute = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Pivot pivot = 13;
 * @return {?proto.transforms.Pivot}
 */
proto.transforms.Transform.prototype.getPivot = function() {
  return /** @type{?proto.transforms.Pivot} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Pivot, 13));
};


/**
 * @param {?proto.transforms.Pivot|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setPivot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearPivot = function() {
  return this.setPivot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasPivot = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Identifier identifier = 14;
 * @return {?proto.transforms.Identifier}
 */
proto.transforms.Transform.prototype.getIdentifier = function() {
  return /** @type{?proto.transforms.Identifier} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Identifier, 14));
};


/**
 * @param {?proto.transforms.Identifier|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setIdentifier = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Fold fold = 15;
 * @return {?proto.transforms.Fold}
 */
proto.transforms.Transform.prototype.getFold = function() {
  return /** @type{?proto.transforms.Fold} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Fold, 15));
};


/**
 * @param {?proto.transforms.Fold|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setFold = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearFold = function() {
  return this.setFold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasFold = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Sequence sequence = 16;
 * @return {?proto.transforms.Sequence}
 */
proto.transforms.Transform.prototype.getSequence = function() {
  return /** @type{?proto.transforms.Sequence} */ (
    jspb.Message.getWrapperField(this, proto.transforms.Sequence, 16));
};


/**
 * @param {?proto.transforms.Sequence|undefined} value
 * @return {!proto.transforms.Transform} returns this
*/
proto.transforms.Transform.prototype.setSequence = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.transforms.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transforms.Transform} returns this
 */
proto.transforms.Transform.prototype.clearSequence = function() {
  return this.setSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transforms.Transform.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transforms.TransformPipeline.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transforms.TransformPipeline.prototype.toObject = function(opt_includeInstance) {
  return proto.transforms.TransformPipeline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transforms.TransformPipeline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.TransformPipeline.toObject = function(includeInstance, msg) {
  var f, obj = {
    transformsList: jspb.Message.toObjectList(msg.getTransformsList(),
    proto.transforms.Transform.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transforms.TransformPipeline}
 */
proto.transforms.TransformPipeline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transforms.TransformPipeline;
  return proto.transforms.TransformPipeline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transforms.TransformPipeline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transforms.TransformPipeline}
 */
proto.transforms.TransformPipeline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.transforms.Transform;
      reader.readMessage(value,proto.transforms.Transform.deserializeBinaryFromReader);
      msg.addTransforms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transforms.TransformPipeline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transforms.TransformPipeline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transforms.TransformPipeline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transforms.TransformPipeline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransformsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.transforms.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Transform transforms = 1;
 * @return {!Array<!proto.transforms.Transform>}
 */
proto.transforms.TransformPipeline.prototype.getTransformsList = function() {
  return /** @type{!Array<!proto.transforms.Transform>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.transforms.Transform, 1));
};


/**
 * @param {!Array<!proto.transforms.Transform>} value
 * @return {!proto.transforms.TransformPipeline} returns this
*/
proto.transforms.TransformPipeline.prototype.setTransformsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.transforms.Transform=} opt_value
 * @param {number=} opt_index
 * @return {!proto.transforms.Transform}
 */
proto.transforms.TransformPipeline.prototype.addTransforms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.transforms.Transform, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transforms.TransformPipeline} returns this
 */
proto.transforms.TransformPipeline.prototype.clearTransformsList = function() {
  return this.setTransformsList([]);
};


/**
 * @enum {number}
 */
proto.transforms.SortOrder = {
  DESCENDING: 0,
  ASCENDING: 1
};

/**
 * @enum {number}
 */
proto.transforms.AggregateOp = {
  COUNT: 0,
  VALID: 1,
  MISSING: 2,
  DISTINCT: 3,
  SUM: 4,
  PRODUCT: 5,
  MEAN: 6,
  AVERAGE: 7,
  VARIANCE: 8,
  VARIANCEP: 9,
  STDEV: 10,
  STDEVP: 11,
  STDERR: 12,
  MEDIAN: 13,
  Q1: 14,
  Q3: 15,
  CI0: 16,
  CI1: 17,
  MIN: 18,
  MAX: 19,
  ARGMIN: 20,
  ARGMAX: 21,
  VALUES: 22
};

/**
 * @enum {number}
 */
proto.transforms.TimeUnitUnit = {
  YEAR: 0,
  QUARTER: 1,
  MONTH: 2,
  DATE: 3,
  WEEK: 4,
  DAY: 5,
  DAYOFYEAR: 6,
  HOURS: 7,
  MINUTES: 8,
  SECONDS: 9,
  MILLISECONDS: 10
};

/**
 * @enum {number}
 */
proto.transforms.TimeUnitTimeZone = {
  LOCAL: 0,
  UTC: 1
};

/**
 * @enum {number}
 */
proto.transforms.WindowOp = {
  ROWNUMBER: 0,
  RANK: 1,
  DENSERANK: 2,
  PERCENTILERANK: 3,
  CUMEDIST: 4,
  NTILE: 5,
  LAG: 6,
  LEAD: 7,
  FIRSTVALUE: 8,
  LASTVALUE: 9,
  NTHVALUE: 10,
  PREVVALUE: 11,
  NEXTVALUE: 12
};

/**
 * @enum {number}
 */
proto.transforms.StackOffset = {
  ZERO: 0,
  CENTER: 1,
  NORMALIZE: 2
};

/**
 * @enum {number}
 */
proto.transforms.ImputeMethod = {
  IMPUTEVALUE: 0,
  IMPUTEMEAN: 1,
  IMPUTEMEDIAN: 2,
  IMPUTEMAX: 3,
  IMPUTEMIN: 4
};

goog.object.extend(exports, proto.transforms);
