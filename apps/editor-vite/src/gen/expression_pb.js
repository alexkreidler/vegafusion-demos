// source: expression.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.expression.ArrayExpression', null, global);
goog.exportSymbol('proto.expression.BinaryExpression', null, global);
goog.exportSymbol('proto.expression.BinaryOperator', null, global);
goog.exportSymbol('proto.expression.CallExpression', null, global);
goog.exportSymbol('proto.expression.ConditionalExpression', null, global);
goog.exportSymbol('proto.expression.Expression', null, global);
goog.exportSymbol('proto.expression.Expression.ExprCase', null, global);
goog.exportSymbol('proto.expression.Identifier', null, global);
goog.exportSymbol('proto.expression.IdentifierABC', null, global);
goog.exportSymbol('proto.expression.Literal', null, global);
goog.exportSymbol('proto.expression.Literal.ValueCase', null, global);
goog.exportSymbol('proto.expression.LogicalExpression', null, global);
goog.exportSymbol('proto.expression.LogicalOperator', null, global);
goog.exportSymbol('proto.expression.MemberExpression', null, global);
goog.exportSymbol('proto.expression.ObjectExpression', null, global);
goog.exportSymbol('proto.expression.Property', null, global);
goog.exportSymbol('proto.expression.Property.KeyCase', null, global);
goog.exportSymbol('proto.expression.Span', null, global);
goog.exportSymbol('proto.expression.UnaryExpression', null, global);
goog.exportSymbol('proto.expression.UnaryOperator', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.Span = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.expression.Span, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.Span.displayName = 'proto.expression.Span';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.Literal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.expression.Literal.oneofGroups_);
};
goog.inherits(proto.expression.Literal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.Literal.displayName = 'proto.expression.Literal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.IdentifierABC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.expression.IdentifierABC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.IdentifierABC.displayName = 'proto.expression.IdentifierABC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.Identifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.expression.Identifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.Identifier.displayName = 'proto.expression.Identifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.UnaryExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.expression.UnaryExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.UnaryExpression.displayName = 'proto.expression.UnaryExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.LogicalExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.expression.LogicalExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.LogicalExpression.displayName = 'proto.expression.LogicalExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.BinaryExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.expression.BinaryExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.BinaryExpression.displayName = 'proto.expression.BinaryExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.ConditionalExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.expression.ConditionalExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.ConditionalExpression.displayName = 'proto.expression.ConditionalExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.MemberExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.expression.MemberExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.MemberExpression.displayName = 'proto.expression.MemberExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.ArrayExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.expression.ArrayExpression.repeatedFields_, null);
};
goog.inherits(proto.expression.ArrayExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.ArrayExpression.displayName = 'proto.expression.ArrayExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.CallExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.expression.CallExpression.repeatedFields_, null);
};
goog.inherits(proto.expression.CallExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.CallExpression.displayName = 'proto.expression.CallExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.expression.Property.oneofGroups_);
};
goog.inherits(proto.expression.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.Property.displayName = 'proto.expression.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.ObjectExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.expression.ObjectExpression.repeatedFields_, null);
};
goog.inherits(proto.expression.ObjectExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.ObjectExpression.displayName = 'proto.expression.ObjectExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.expression.Expression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.expression.Expression.oneofGroups_);
};
goog.inherits(proto.expression.Expression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.expression.Expression.displayName = 'proto.expression.Expression';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.Span.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.Span.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.Span} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Span.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: jspb.Message.getFieldWithDefault(msg, 1, 0),
    end: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.Span}
 */
proto.expression.Span.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.Span;
  return proto.expression.Span.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.Span} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.Span}
 */
proto.expression.Span.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.Span.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.Span.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.Span} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Span.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 start = 1;
 * @return {number}
 */
proto.expression.Span.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.expression.Span} returns this
 */
proto.expression.Span.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end = 2;
 * @return {number}
 */
proto.expression.Span.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.expression.Span} returns this
 */
proto.expression.Span.prototype.setEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.expression.Literal.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.expression.Literal.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING: 2,
  BOOLEAN: 3,
  NUMBER: 4,
  NULL: 5
};

/**
 * @return {proto.expression.Literal.ValueCase}
 */
proto.expression.Literal.prototype.getValueCase = function() {
  return /** @type {proto.expression.Literal.ValueCase} */(jspb.Message.computeOneofCase(this, proto.expression.Literal.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.Literal.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.Literal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.Literal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Literal.toObject = function(includeInstance, msg) {
  var f, obj = {
    raw: jspb.Message.getFieldWithDefault(msg, 1, ""),
    string: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pb_boolean: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    number: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    pb_null: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.Literal}
 */
proto.expression.Literal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.Literal;
  return proto.expression.Literal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.Literal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.Literal}
 */
proto.expression.Literal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRaw(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumber(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNull(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.Literal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.Literal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.Literal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Literal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRaw();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string raw = 1;
 * @return {string}
 */
proto.expression.Literal.prototype.getRaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.expression.Literal} returns this
 */
proto.expression.Literal.prototype.setRaw = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string = 2;
 * @return {string}
 */
proto.expression.Literal.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.expression.Literal} returns this
 */
proto.expression.Literal.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.expression.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.expression.Literal} returns this
 */
proto.expression.Literal.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 2, proto.expression.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Literal.prototype.hasString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool boolean = 3;
 * @return {boolean}
 */
proto.expression.Literal.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.expression.Literal} returns this
 */
proto.expression.Literal.prototype.setBoolean = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.expression.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.expression.Literal} returns this
 */
proto.expression.Literal.prototype.clearBoolean = function() {
  return jspb.Message.setOneofField(this, 3, proto.expression.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Literal.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double number = 4;
 * @return {number}
 */
proto.expression.Literal.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.expression.Literal} returns this
 */
proto.expression.Literal.prototype.setNumber = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.expression.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.expression.Literal} returns this
 */
proto.expression.Literal.prototype.clearNumber = function() {
  return jspb.Message.setOneofField(this, 4, proto.expression.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Literal.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool null = 5;
 * @return {boolean}
 */
proto.expression.Literal.prototype.getNull = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.expression.Literal} returns this
 */
proto.expression.Literal.prototype.setNull = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.expression.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.expression.Literal} returns this
 */
proto.expression.Literal.prototype.clearNull = function() {
  return jspb.Message.setOneofField(this, 5, proto.expression.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Literal.prototype.hasNull = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.IdentifierABC.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.IdentifierABC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.IdentifierABC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.IdentifierABC.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.IdentifierABC}
 */
proto.expression.IdentifierABC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.IdentifierABC;
  return proto.expression.IdentifierABC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.IdentifierABC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.IdentifierABC}
 */
proto.expression.IdentifierABC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.IdentifierABC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.IdentifierABC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.IdentifierABC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.IdentifierABC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.expression.IdentifierABC.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.expression.IdentifierABC} returns this
 */
proto.expression.IdentifierABC.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.Identifier.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.Identifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.Identifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Identifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.Identifier}
 */
proto.expression.Identifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.Identifier;
  return proto.expression.Identifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.Identifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.Identifier}
 */
proto.expression.Identifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.Identifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.Identifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.Identifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Identifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.expression.Identifier.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.expression.Identifier} returns this
 */
proto.expression.Identifier.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.UnaryExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.UnaryExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.UnaryExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.UnaryExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    prefix: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    argument: (f = msg.getArgument()) && proto.expression.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.UnaryExpression}
 */
proto.expression.UnaryExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.UnaryExpression;
  return proto.expression.UnaryExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.UnaryExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.UnaryExpression}
 */
proto.expression.UnaryExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.expression.UnaryOperator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrefix(value);
      break;
    case 3:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setArgument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.UnaryExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.UnaryExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.UnaryExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.UnaryExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPrefix();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getArgument();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional UnaryOperator operator = 1;
 * @return {!proto.expression.UnaryOperator}
 */
proto.expression.UnaryExpression.prototype.getOperator = function() {
  return /** @type {!proto.expression.UnaryOperator} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.expression.UnaryOperator} value
 * @return {!proto.expression.UnaryExpression} returns this
 */
proto.expression.UnaryExpression.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool prefix = 2;
 * @return {boolean}
 */
proto.expression.UnaryExpression.prototype.getPrefix = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.expression.UnaryExpression} returns this
 */
proto.expression.UnaryExpression.prototype.setPrefix = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Expression argument = 3;
 * @return {?proto.expression.Expression}
 */
proto.expression.UnaryExpression.prototype.getArgument = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 3));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.UnaryExpression} returns this
*/
proto.expression.UnaryExpression.prototype.setArgument = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.UnaryExpression} returns this
 */
proto.expression.UnaryExpression.prototype.clearArgument = function() {
  return this.setArgument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.UnaryExpression.prototype.hasArgument = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.LogicalExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.LogicalExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.LogicalExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.LogicalExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: (f = msg.getLeft()) && proto.expression.Expression.toObject(includeInstance, f),
    operator: jspb.Message.getFieldWithDefault(msg, 2, 0),
    right: (f = msg.getRight()) && proto.expression.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.LogicalExpression}
 */
proto.expression.LogicalExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.LogicalExpression;
  return proto.expression.LogicalExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.LogicalExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.LogicalExpression}
 */
proto.expression.LogicalExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {!proto.expression.LogicalOperator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 3:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.LogicalExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.LogicalExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.LogicalExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.LogicalExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expression left = 1;
 * @return {?proto.expression.Expression}
 */
proto.expression.LogicalExpression.prototype.getLeft = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 1));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.LogicalExpression} returns this
*/
proto.expression.LogicalExpression.prototype.setLeft = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.LogicalExpression} returns this
 */
proto.expression.LogicalExpression.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.LogicalExpression.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LogicalOperator operator = 2;
 * @return {!proto.expression.LogicalOperator}
 */
proto.expression.LogicalExpression.prototype.getOperator = function() {
  return /** @type {!proto.expression.LogicalOperator} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.expression.LogicalOperator} value
 * @return {!proto.expression.LogicalExpression} returns this
 */
proto.expression.LogicalExpression.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Expression right = 3;
 * @return {?proto.expression.Expression}
 */
proto.expression.LogicalExpression.prototype.getRight = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 3));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.LogicalExpression} returns this
*/
proto.expression.LogicalExpression.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.LogicalExpression} returns this
 */
proto.expression.LogicalExpression.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.LogicalExpression.prototype.hasRight = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.BinaryExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.BinaryExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.BinaryExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.BinaryExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: (f = msg.getLeft()) && proto.expression.Expression.toObject(includeInstance, f),
    operator: jspb.Message.getFieldWithDefault(msg, 2, 0),
    right: (f = msg.getRight()) && proto.expression.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.BinaryExpression}
 */
proto.expression.BinaryExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.BinaryExpression;
  return proto.expression.BinaryExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.BinaryExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.BinaryExpression}
 */
proto.expression.BinaryExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {!proto.expression.BinaryOperator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 3:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.BinaryExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.BinaryExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.BinaryExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.BinaryExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expression left = 1;
 * @return {?proto.expression.Expression}
 */
proto.expression.BinaryExpression.prototype.getLeft = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 1));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.BinaryExpression} returns this
*/
proto.expression.BinaryExpression.prototype.setLeft = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.BinaryExpression} returns this
 */
proto.expression.BinaryExpression.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.BinaryExpression.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BinaryOperator operator = 2;
 * @return {!proto.expression.BinaryOperator}
 */
proto.expression.BinaryExpression.prototype.getOperator = function() {
  return /** @type {!proto.expression.BinaryOperator} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.expression.BinaryOperator} value
 * @return {!proto.expression.BinaryExpression} returns this
 */
proto.expression.BinaryExpression.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Expression right = 3;
 * @return {?proto.expression.Expression}
 */
proto.expression.BinaryExpression.prototype.getRight = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 3));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.BinaryExpression} returns this
*/
proto.expression.BinaryExpression.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.BinaryExpression} returns this
 */
proto.expression.BinaryExpression.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.BinaryExpression.prototype.hasRight = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.ConditionalExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.ConditionalExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.ConditionalExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.ConditionalExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    test: (f = msg.getTest()) && proto.expression.Expression.toObject(includeInstance, f),
    consequent: (f = msg.getConsequent()) && proto.expression.Expression.toObject(includeInstance, f),
    alternate: (f = msg.getAlternate()) && proto.expression.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.ConditionalExpression}
 */
proto.expression.ConditionalExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.ConditionalExpression;
  return proto.expression.ConditionalExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.ConditionalExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.ConditionalExpression}
 */
proto.expression.ConditionalExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setTest(value);
      break;
    case 2:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setConsequent(value);
      break;
    case 3:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setAlternate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.ConditionalExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.ConditionalExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.ConditionalExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.ConditionalExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
  f = message.getConsequent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
  f = message.getAlternate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expression test = 1;
 * @return {?proto.expression.Expression}
 */
proto.expression.ConditionalExpression.prototype.getTest = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 1));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.ConditionalExpression} returns this
*/
proto.expression.ConditionalExpression.prototype.setTest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.ConditionalExpression} returns this
 */
proto.expression.ConditionalExpression.prototype.clearTest = function() {
  return this.setTest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.ConditionalExpression.prototype.hasTest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Expression consequent = 2;
 * @return {?proto.expression.Expression}
 */
proto.expression.ConditionalExpression.prototype.getConsequent = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 2));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.ConditionalExpression} returns this
*/
proto.expression.ConditionalExpression.prototype.setConsequent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.ConditionalExpression} returns this
 */
proto.expression.ConditionalExpression.prototype.clearConsequent = function() {
  return this.setConsequent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.ConditionalExpression.prototype.hasConsequent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Expression alternate = 3;
 * @return {?proto.expression.Expression}
 */
proto.expression.ConditionalExpression.prototype.getAlternate = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 3));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.ConditionalExpression} returns this
*/
proto.expression.ConditionalExpression.prototype.setAlternate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.ConditionalExpression} returns this
 */
proto.expression.ConditionalExpression.prototype.clearAlternate = function() {
  return this.setAlternate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.ConditionalExpression.prototype.hasAlternate = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.MemberExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.MemberExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.MemberExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.MemberExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    object: (f = msg.getObject()) && proto.expression.Expression.toObject(includeInstance, f),
    property: (f = msg.getProperty()) && proto.expression.Expression.toObject(includeInstance, f),
    computed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.MemberExpression}
 */
proto.expression.MemberExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.MemberExpression;
  return proto.expression.MemberExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.MemberExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.MemberExpression}
 */
proto.expression.MemberExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 2:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setComputed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.MemberExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.MemberExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.MemberExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.MemberExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
  f = message.getComputed();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Expression object = 1;
 * @return {?proto.expression.Expression}
 */
proto.expression.MemberExpression.prototype.getObject = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 1));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.MemberExpression} returns this
*/
proto.expression.MemberExpression.prototype.setObject = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.MemberExpression} returns this
 */
proto.expression.MemberExpression.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.MemberExpression.prototype.hasObject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Expression property = 2;
 * @return {?proto.expression.Expression}
 */
proto.expression.MemberExpression.prototype.getProperty = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 2));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.MemberExpression} returns this
*/
proto.expression.MemberExpression.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.MemberExpression} returns this
 */
proto.expression.MemberExpression.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.MemberExpression.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool computed = 3;
 * @return {boolean}
 */
proto.expression.MemberExpression.prototype.getComputed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.expression.MemberExpression} returns this
 */
proto.expression.MemberExpression.prototype.setComputed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.expression.ArrayExpression.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.ArrayExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.ArrayExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.ArrayExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.ArrayExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.expression.Expression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.ArrayExpression}
 */
proto.expression.ArrayExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.ArrayExpression;
  return proto.expression.ArrayExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.ArrayExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.ArrayExpression}
 */
proto.expression.ArrayExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.ArrayExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.ArrayExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.ArrayExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.ArrayExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Expression elements = 1;
 * @return {!Array<!proto.expression.Expression>}
 */
proto.expression.ArrayExpression.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.expression.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.expression.Expression, 1));
};


/**
 * @param {!Array<!proto.expression.Expression>} value
 * @return {!proto.expression.ArrayExpression} returns this
*/
proto.expression.ArrayExpression.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.expression.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.expression.Expression}
 */
proto.expression.ArrayExpression.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.expression.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.expression.ArrayExpression} returns this
 */
proto.expression.ArrayExpression.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.expression.CallExpression.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.CallExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.CallExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.CallExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.CallExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    callee: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.expression.Expression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.CallExpression}
 */
proto.expression.CallExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.CallExpression;
  return proto.expression.CallExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.CallExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.CallExpression}
 */
proto.expression.CallExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallee(value);
      break;
    case 2:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.CallExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.CallExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.CallExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.CallExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallee();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string callee = 1;
 * @return {string}
 */
proto.expression.CallExpression.prototype.getCallee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.expression.CallExpression} returns this
 */
proto.expression.CallExpression.prototype.setCallee = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Expression arguments = 2;
 * @return {!Array<!proto.expression.Expression>}
 */
proto.expression.CallExpression.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.expression.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.expression.Expression, 2));
};


/**
 * @param {!Array<!proto.expression.Expression>} value
 * @return {!proto.expression.CallExpression} returns this
*/
proto.expression.CallExpression.prototype.setArgumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.expression.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.expression.Expression}
 */
proto.expression.CallExpression.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.expression.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.expression.CallExpression} returns this
 */
proto.expression.CallExpression.prototype.clearArgumentsList = function() {
  return this.setArgumentsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.expression.Property.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.expression.Property.KeyCase = {
  KEY_NOT_SET: 0,
  LITERAL: 1,
  IDENTIFIER: 2
};

/**
 * @return {proto.expression.Property.KeyCase}
 */
proto.expression.Property.prototype.getKeyCase = function() {
  return /** @type {proto.expression.Property.KeyCase} */(jspb.Message.computeOneofCase(this, proto.expression.Property.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    literal: (f = msg.getLiteral()) && proto.expression.Literal.toObject(includeInstance, f),
    identifier: (f = msg.getIdentifier()) && proto.expression.Identifier.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.expression.Expression.toObject(includeInstance, f),
    kind: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.Property}
 */
proto.expression.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.Property;
  return proto.expression.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.Property}
 */
proto.expression.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.expression.Literal;
      reader.readMessage(value,proto.expression.Literal.deserializeBinaryFromReader);
      msg.setLiteral(value);
      break;
    case 2:
      var value = new proto.expression.Identifier;
      reader.readMessage(value,proto.expression.Identifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 3:
      var value = new proto.expression.Expression;
      reader.readMessage(value,proto.expression.Expression.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLiteral();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.expression.Literal.serializeBinaryToWriter
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.expression.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.expression.Expression.serializeBinaryToWriter
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Literal literal = 1;
 * @return {?proto.expression.Literal}
 */
proto.expression.Property.prototype.getLiteral = function() {
  return /** @type{?proto.expression.Literal} */ (
    jspb.Message.getWrapperField(this, proto.expression.Literal, 1));
};


/**
 * @param {?proto.expression.Literal|undefined} value
 * @return {!proto.expression.Property} returns this
*/
proto.expression.Property.prototype.setLiteral = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.expression.Property.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Property} returns this
 */
proto.expression.Property.prototype.clearLiteral = function() {
  return this.setLiteral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Property.prototype.hasLiteral = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Identifier identifier = 2;
 * @return {?proto.expression.Identifier}
 */
proto.expression.Property.prototype.getIdentifier = function() {
  return /** @type{?proto.expression.Identifier} */ (
    jspb.Message.getWrapperField(this, proto.expression.Identifier, 2));
};


/**
 * @param {?proto.expression.Identifier|undefined} value
 * @return {!proto.expression.Property} returns this
*/
proto.expression.Property.prototype.setIdentifier = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.expression.Property.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Property} returns this
 */
proto.expression.Property.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Property.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Expression value = 3;
 * @return {?proto.expression.Expression}
 */
proto.expression.Property.prototype.getValue = function() {
  return /** @type{?proto.expression.Expression} */ (
    jspb.Message.getWrapperField(this, proto.expression.Expression, 3));
};


/**
 * @param {?proto.expression.Expression|undefined} value
 * @return {!proto.expression.Property} returns this
*/
proto.expression.Property.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Property} returns this
 */
proto.expression.Property.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Property.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string kind = 4;
 * @return {string}
 */
proto.expression.Property.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.expression.Property} returns this
 */
proto.expression.Property.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.expression.ObjectExpression.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.ObjectExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.ObjectExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.ObjectExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.ObjectExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.expression.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.ObjectExpression}
 */
proto.expression.ObjectExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.ObjectExpression;
  return proto.expression.ObjectExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.ObjectExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.ObjectExpression}
 */
proto.expression.ObjectExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.expression.Property;
      reader.readMessage(value,proto.expression.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.ObjectExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.ObjectExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.ObjectExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.ObjectExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.expression.Property.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Property properties = 1;
 * @return {!Array<!proto.expression.Property>}
 */
proto.expression.ObjectExpression.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.expression.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.expression.Property, 1));
};


/**
 * @param {!Array<!proto.expression.Property>} value
 * @return {!proto.expression.ObjectExpression} returns this
*/
proto.expression.ObjectExpression.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.expression.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.expression.Property}
 */
proto.expression.ObjectExpression.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.expression.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.expression.ObjectExpression} returns this
 */
proto.expression.ObjectExpression.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.expression.Expression.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.expression.Expression.ExprCase = {
  EXPR_NOT_SET: 0,
  IDENTIFIER: 1,
  LITERAL: 2,
  BINARY: 3,
  LOGICAL: 4,
  UNARY: 5,
  CONDITIONAL: 6,
  CALL: 7,
  ARRAY: 8,
  OBJECT: 9,
  MEMBER: 10
};

/**
 * @return {proto.expression.Expression.ExprCase}
 */
proto.expression.Expression.prototype.getExprCase = function() {
  return /** @type {proto.expression.Expression.ExprCase} */(jspb.Message.computeOneofCase(this, proto.expression.Expression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.expression.Expression.prototype.toObject = function(opt_includeInstance) {
  return proto.expression.Expression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.expression.Expression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Expression.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: (f = msg.getIdentifier()) && proto.expression.Identifier.toObject(includeInstance, f),
    literal: (f = msg.getLiteral()) && proto.expression.Literal.toObject(includeInstance, f),
    binary: (f = msg.getBinary()) && proto.expression.BinaryExpression.toObject(includeInstance, f),
    logical: (f = msg.getLogical()) && proto.expression.LogicalExpression.toObject(includeInstance, f),
    unary: (f = msg.getUnary()) && proto.expression.UnaryExpression.toObject(includeInstance, f),
    conditional: (f = msg.getConditional()) && proto.expression.ConditionalExpression.toObject(includeInstance, f),
    call: (f = msg.getCall()) && proto.expression.CallExpression.toObject(includeInstance, f),
    array: (f = msg.getArray()) && proto.expression.ArrayExpression.toObject(includeInstance, f),
    object: (f = msg.getObject()) && proto.expression.ObjectExpression.toObject(includeInstance, f),
    member: (f = msg.getMember()) && proto.expression.MemberExpression.toObject(includeInstance, f),
    span: (f = msg.getSpan()) && proto.expression.Span.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.expression.Expression}
 */
proto.expression.Expression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.expression.Expression;
  return proto.expression.Expression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.expression.Expression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.expression.Expression}
 */
proto.expression.Expression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.expression.Identifier;
      reader.readMessage(value,proto.expression.Identifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 2:
      var value = new proto.expression.Literal;
      reader.readMessage(value,proto.expression.Literal.deserializeBinaryFromReader);
      msg.setLiteral(value);
      break;
    case 3:
      var value = new proto.expression.BinaryExpression;
      reader.readMessage(value,proto.expression.BinaryExpression.deserializeBinaryFromReader);
      msg.setBinary(value);
      break;
    case 4:
      var value = new proto.expression.LogicalExpression;
      reader.readMessage(value,proto.expression.LogicalExpression.deserializeBinaryFromReader);
      msg.setLogical(value);
      break;
    case 5:
      var value = new proto.expression.UnaryExpression;
      reader.readMessage(value,proto.expression.UnaryExpression.deserializeBinaryFromReader);
      msg.setUnary(value);
      break;
    case 6:
      var value = new proto.expression.ConditionalExpression;
      reader.readMessage(value,proto.expression.ConditionalExpression.deserializeBinaryFromReader);
      msg.setConditional(value);
      break;
    case 7:
      var value = new proto.expression.CallExpression;
      reader.readMessage(value,proto.expression.CallExpression.deserializeBinaryFromReader);
      msg.setCall(value);
      break;
    case 8:
      var value = new proto.expression.ArrayExpression;
      reader.readMessage(value,proto.expression.ArrayExpression.deserializeBinaryFromReader);
      msg.setArray(value);
      break;
    case 9:
      var value = new proto.expression.ObjectExpression;
      reader.readMessage(value,proto.expression.ObjectExpression.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 10:
      var value = new proto.expression.MemberExpression;
      reader.readMessage(value,proto.expression.MemberExpression.deserializeBinaryFromReader);
      msg.setMember(value);
      break;
    case 11:
      var value = new proto.expression.Span;
      reader.readMessage(value,proto.expression.Span.deserializeBinaryFromReader);
      msg.setSpan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.expression.Expression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.expression.Expression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.expression.Expression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.expression.Expression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.expression.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getLiteral();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.expression.Literal.serializeBinaryToWriter
    );
  }
  f = message.getBinary();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.expression.BinaryExpression.serializeBinaryToWriter
    );
  }
  f = message.getLogical();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.expression.LogicalExpression.serializeBinaryToWriter
    );
  }
  f = message.getUnary();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.expression.UnaryExpression.serializeBinaryToWriter
    );
  }
  f = message.getConditional();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.expression.ConditionalExpression.serializeBinaryToWriter
    );
  }
  f = message.getCall();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.expression.CallExpression.serializeBinaryToWriter
    );
  }
  f = message.getArray();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.expression.ArrayExpression.serializeBinaryToWriter
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.expression.ObjectExpression.serializeBinaryToWriter
    );
  }
  f = message.getMember();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.expression.MemberExpression.serializeBinaryToWriter
    );
  }
  f = message.getSpan();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.expression.Span.serializeBinaryToWriter
    );
  }
};


/**
 * optional Identifier identifier = 1;
 * @return {?proto.expression.Identifier}
 */
proto.expression.Expression.prototype.getIdentifier = function() {
  return /** @type{?proto.expression.Identifier} */ (
    jspb.Message.getWrapperField(this, proto.expression.Identifier, 1));
};


/**
 * @param {?proto.expression.Identifier|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setIdentifier = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Literal literal = 2;
 * @return {?proto.expression.Literal}
 */
proto.expression.Expression.prototype.getLiteral = function() {
  return /** @type{?proto.expression.Literal} */ (
    jspb.Message.getWrapperField(this, proto.expression.Literal, 2));
};


/**
 * @param {?proto.expression.Literal|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setLiteral = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearLiteral = function() {
  return this.setLiteral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasLiteral = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BinaryExpression binary = 3;
 * @return {?proto.expression.BinaryExpression}
 */
proto.expression.Expression.prototype.getBinary = function() {
  return /** @type{?proto.expression.BinaryExpression} */ (
    jspb.Message.getWrapperField(this, proto.expression.BinaryExpression, 3));
};


/**
 * @param {?proto.expression.BinaryExpression|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setBinary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearBinary = function() {
  return this.setBinary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasBinary = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LogicalExpression logical = 4;
 * @return {?proto.expression.LogicalExpression}
 */
proto.expression.Expression.prototype.getLogical = function() {
  return /** @type{?proto.expression.LogicalExpression} */ (
    jspb.Message.getWrapperField(this, proto.expression.LogicalExpression, 4));
};


/**
 * @param {?proto.expression.LogicalExpression|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setLogical = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearLogical = function() {
  return this.setLogical(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasLogical = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UnaryExpression unary = 5;
 * @return {?proto.expression.UnaryExpression}
 */
proto.expression.Expression.prototype.getUnary = function() {
  return /** @type{?proto.expression.UnaryExpression} */ (
    jspb.Message.getWrapperField(this, proto.expression.UnaryExpression, 5));
};


/**
 * @param {?proto.expression.UnaryExpression|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setUnary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearUnary = function() {
  return this.setUnary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasUnary = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ConditionalExpression conditional = 6;
 * @return {?proto.expression.ConditionalExpression}
 */
proto.expression.Expression.prototype.getConditional = function() {
  return /** @type{?proto.expression.ConditionalExpression} */ (
    jspb.Message.getWrapperField(this, proto.expression.ConditionalExpression, 6));
};


/**
 * @param {?proto.expression.ConditionalExpression|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setConditional = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearConditional = function() {
  return this.setConditional(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasConditional = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CallExpression call = 7;
 * @return {?proto.expression.CallExpression}
 */
proto.expression.Expression.prototype.getCall = function() {
  return /** @type{?proto.expression.CallExpression} */ (
    jspb.Message.getWrapperField(this, proto.expression.CallExpression, 7));
};


/**
 * @param {?proto.expression.CallExpression|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearCall = function() {
  return this.setCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasCall = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ArrayExpression array = 8;
 * @return {?proto.expression.ArrayExpression}
 */
proto.expression.Expression.prototype.getArray = function() {
  return /** @type{?proto.expression.ArrayExpression} */ (
    jspb.Message.getWrapperField(this, proto.expression.ArrayExpression, 8));
};


/**
 * @param {?proto.expression.ArrayExpression|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setArray = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearArray = function() {
  return this.setArray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasArray = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ObjectExpression object = 9;
 * @return {?proto.expression.ObjectExpression}
 */
proto.expression.Expression.prototype.getObject = function() {
  return /** @type{?proto.expression.ObjectExpression} */ (
    jspb.Message.getWrapperField(this, proto.expression.ObjectExpression, 9));
};


/**
 * @param {?proto.expression.ObjectExpression|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setObject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasObject = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MemberExpression member = 10;
 * @return {?proto.expression.MemberExpression}
 */
proto.expression.Expression.prototype.getMember = function() {
  return /** @type{?proto.expression.MemberExpression} */ (
    jspb.Message.getWrapperField(this, proto.expression.MemberExpression, 10));
};


/**
 * @param {?proto.expression.MemberExpression|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setMember = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.expression.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearMember = function() {
  return this.setMember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasMember = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Span span = 11;
 * @return {?proto.expression.Span}
 */
proto.expression.Expression.prototype.getSpan = function() {
  return /** @type{?proto.expression.Span} */ (
    jspb.Message.getWrapperField(this, proto.expression.Span, 11));
};


/**
 * @param {?proto.expression.Span|undefined} value
 * @return {!proto.expression.Expression} returns this
*/
proto.expression.Expression.prototype.setSpan = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.expression.Expression} returns this
 */
proto.expression.Expression.prototype.clearSpan = function() {
  return this.setSpan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.expression.Expression.prototype.hasSpan = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * @enum {number}
 */
proto.expression.UnaryOperator = {
  POS: 0,
  NEG: 1,
  NOT: 2
};

/**
 * @enum {number}
 */
proto.expression.LogicalOperator = {
  OR: 0,
  AND: 1
};

/**
 * @enum {number}
 */
proto.expression.BinaryOperator = {
  EQUALS: 0,
  NOTEQUALS: 1,
  STRICTEQUALS: 2,
  NOTSTRICTEQUALS: 3,
  LESSTHAN: 4,
  LESSTHANEQUAL: 5,
  GREATERTHAN: 6,
  GREATERTHANEQUAL: 7,
  PLUS: 8,
  MINUS: 9,
  MULT: 10,
  DIV: 11,
  MOD: 12
};

goog.object.extend(exports, proto.expression);
