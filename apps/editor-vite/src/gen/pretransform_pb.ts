// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pretransform.proto (package pretransform, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ResponseTaskValue, Variable } from "./tasks_pb.js";

/**
 * / Pre transform spec messages
 *
 * @generated from message pretransform.PreTransformSpecOpts
 */
export class PreTransformSpecOpts extends Message<PreTransformSpecOpts> {
  /**
   * @generated from field: optional uint32 row_limit = 1;
   */
  rowLimit?: number;

  /**
   * @generated from field: repeated pretransform.PreTransformInlineDataset inline_datasets = 2;
   */
  inlineDatasets: PreTransformInlineDataset[] = [];

  /**
   * @generated from field: bool preserve_interactivity = 3;
   */
  preserveInteractivity = false;

  constructor(data?: PartialMessage<PreTransformSpecOpts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformSpecOpts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "row_limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "inline_datasets", kind: "message", T: PreTransformInlineDataset, repeated: true },
    { no: 3, name: "preserve_interactivity", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformSpecOpts {
    return new PreTransformSpecOpts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformSpecOpts {
    return new PreTransformSpecOpts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformSpecOpts {
    return new PreTransformSpecOpts().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformSpecOpts | PlainMessage<PreTransformSpecOpts> | undefined, b: PreTransformSpecOpts | PlainMessage<PreTransformSpecOpts> | undefined): boolean {
    return proto3.util.equals(PreTransformSpecOpts, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformSpecRequest
 */
export class PreTransformSpecRequest extends Message<PreTransformSpecRequest> {
  /**
   * @generated from field: string spec = 1;
   */
  spec = "";

  /**
   * @generated from field: string local_tz = 2;
   */
  localTz = "";

  /**
   * @generated from field: optional string output_tz = 3;
   */
  outputTz?: string;

  /**
   * @generated from field: pretransform.PreTransformSpecOpts opts = 4;
   */
  opts?: PreTransformSpecOpts;

  constructor(data?: PartialMessage<PreTransformSpecRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformSpecRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "local_tz", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "output_tz", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "opts", kind: "message", T: PreTransformSpecOpts },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformSpecRequest {
    return new PreTransformSpecRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformSpecRequest {
    return new PreTransformSpecRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformSpecRequest {
    return new PreTransformSpecRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformSpecRequest | PlainMessage<PreTransformSpecRequest> | undefined, b: PreTransformSpecRequest | PlainMessage<PreTransformSpecRequest> | undefined): boolean {
    return proto3.util.equals(PreTransformSpecRequest, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformSpecResponse
 */
export class PreTransformSpecResponse extends Message<PreTransformSpecResponse> {
  /**
   * @generated from field: string spec = 1;
   */
  spec = "";

  /**
   * @generated from field: repeated pretransform.PreTransformSpecWarning warnings = 2;
   */
  warnings: PreTransformSpecWarning[] = [];

  constructor(data?: PartialMessage<PreTransformSpecResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformSpecResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "warnings", kind: "message", T: PreTransformSpecWarning, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformSpecResponse {
    return new PreTransformSpecResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformSpecResponse {
    return new PreTransformSpecResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformSpecResponse {
    return new PreTransformSpecResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformSpecResponse | PlainMessage<PreTransformSpecResponse> | undefined, b: PreTransformSpecResponse | PlainMessage<PreTransformSpecResponse> | undefined): boolean {
    return proto3.util.equals(PreTransformSpecResponse, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformSpecWarning
 */
export class PreTransformSpecWarning extends Message<PreTransformSpecWarning> {
  /**
   * @generated from oneof pretransform.PreTransformSpecWarning.warning_type
   */
  warningType: {
    /**
     * @generated from field: pretransform.PreTransformRowLimitWarning row_limit = 1;
     */
    value: PreTransformRowLimitWarning;
    case: "rowLimit";
  } | {
    /**
     * @generated from field: pretransform.PreTransformBrokenInteractivityWarning broken_interactivity = 2;
     */
    value: PreTransformBrokenInteractivityWarning;
    case: "brokenInteractivity";
  } | {
    /**
     * @generated from field: pretransform.PreTransformUnsupportedWarning unsupported = 3;
     */
    value: PreTransformUnsupportedWarning;
    case: "unsupported";
  } | {
    /**
     * @generated from field: pretransform.PlannerWarning planner = 4;
     */
    value: PlannerWarning;
    case: "planner";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PreTransformSpecWarning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformSpecWarning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "row_limit", kind: "message", T: PreTransformRowLimitWarning, oneof: "warning_type" },
    { no: 2, name: "broken_interactivity", kind: "message", T: PreTransformBrokenInteractivityWarning, oneof: "warning_type" },
    { no: 3, name: "unsupported", kind: "message", T: PreTransformUnsupportedWarning, oneof: "warning_type" },
    { no: 4, name: "planner", kind: "message", T: PlannerWarning, oneof: "warning_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformSpecWarning {
    return new PreTransformSpecWarning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformSpecWarning {
    return new PreTransformSpecWarning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformSpecWarning {
    return new PreTransformSpecWarning().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformSpecWarning | PlainMessage<PreTransformSpecWarning> | undefined, b: PreTransformSpecWarning | PlainMessage<PreTransformSpecWarning> | undefined): boolean {
    return proto3.util.equals(PreTransformSpecWarning, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformRowLimitWarning
 */
export class PreTransformRowLimitWarning extends Message<PreTransformRowLimitWarning> {
  /**
   * @generated from field: repeated tasks.Variable datasets = 1;
   */
  datasets: Variable[] = [];

  constructor(data?: PartialMessage<PreTransformRowLimitWarning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformRowLimitWarning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "datasets", kind: "message", T: Variable, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformRowLimitWarning {
    return new PreTransformRowLimitWarning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformRowLimitWarning {
    return new PreTransformRowLimitWarning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformRowLimitWarning {
    return new PreTransformRowLimitWarning().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformRowLimitWarning | PlainMessage<PreTransformRowLimitWarning> | undefined, b: PreTransformRowLimitWarning | PlainMessage<PreTransformRowLimitWarning> | undefined): boolean {
    return proto3.util.equals(PreTransformRowLimitWarning, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformBrokenInteractivityWarning
 */
export class PreTransformBrokenInteractivityWarning extends Message<PreTransformBrokenInteractivityWarning> {
  /**
   * @generated from field: repeated tasks.Variable vars = 1;
   */
  vars: Variable[] = [];

  constructor(data?: PartialMessage<PreTransformBrokenInteractivityWarning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformBrokenInteractivityWarning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vars", kind: "message", T: Variable, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformBrokenInteractivityWarning {
    return new PreTransformBrokenInteractivityWarning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformBrokenInteractivityWarning {
    return new PreTransformBrokenInteractivityWarning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformBrokenInteractivityWarning {
    return new PreTransformBrokenInteractivityWarning().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformBrokenInteractivityWarning | PlainMessage<PreTransformBrokenInteractivityWarning> | undefined, b: PreTransformBrokenInteractivityWarning | PlainMessage<PreTransformBrokenInteractivityWarning> | undefined): boolean {
    return proto3.util.equals(PreTransformBrokenInteractivityWarning, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformUnsupportedWarning
 */
export class PreTransformUnsupportedWarning extends Message<PreTransformUnsupportedWarning> {
  constructor(data?: PartialMessage<PreTransformUnsupportedWarning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformUnsupportedWarning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformUnsupportedWarning {
    return new PreTransformUnsupportedWarning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformUnsupportedWarning {
    return new PreTransformUnsupportedWarning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformUnsupportedWarning {
    return new PreTransformUnsupportedWarning().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformUnsupportedWarning | PlainMessage<PreTransformUnsupportedWarning> | undefined, b: PreTransformUnsupportedWarning | PlainMessage<PreTransformUnsupportedWarning> | undefined): boolean {
    return proto3.util.equals(PreTransformUnsupportedWarning, a, b);
  }
}

/**
 * / Pre transform value messages
 *
 * @generated from message pretransform.PreTransformVariable
 */
export class PreTransformVariable extends Message<PreTransformVariable> {
  /**
   * @generated from field: tasks.Variable variable = 1;
   */
  variable?: Variable;

  /**
   * @generated from field: repeated uint32 scope = 2;
   */
  scope: number[] = [];

  constructor(data?: PartialMessage<PreTransformVariable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformVariable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variable", kind: "message", T: Variable },
    { no: 2, name: "scope", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformVariable {
    return new PreTransformVariable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformVariable {
    return new PreTransformVariable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformVariable {
    return new PreTransformVariable().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformVariable | PlainMessage<PreTransformVariable> | undefined, b: PreTransformVariable | PlainMessage<PreTransformVariable> | undefined): boolean {
    return proto3.util.equals(PreTransformVariable, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformValuesOpts
 */
export class PreTransformValuesOpts extends Message<PreTransformValuesOpts> {
  /**
   * @generated from field: repeated pretransform.PreTransformVariable variables = 1;
   */
  variables: PreTransformVariable[] = [];

  /**
   * @generated from field: repeated pretransform.PreTransformInlineDataset inline_datasets = 2;
   */
  inlineDatasets: PreTransformInlineDataset[] = [];

  /**
   * @generated from field: optional uint32 row_limit = 3;
   */
  rowLimit?: number;

  constructor(data?: PartialMessage<PreTransformValuesOpts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformValuesOpts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variables", kind: "message", T: PreTransformVariable, repeated: true },
    { no: 2, name: "inline_datasets", kind: "message", T: PreTransformInlineDataset, repeated: true },
    { no: 3, name: "row_limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformValuesOpts {
    return new PreTransformValuesOpts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformValuesOpts {
    return new PreTransformValuesOpts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformValuesOpts {
    return new PreTransformValuesOpts().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformValuesOpts | PlainMessage<PreTransformValuesOpts> | undefined, b: PreTransformValuesOpts | PlainMessage<PreTransformValuesOpts> | undefined): boolean {
    return proto3.util.equals(PreTransformValuesOpts, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformValuesRequest
 */
export class PreTransformValuesRequest extends Message<PreTransformValuesRequest> {
  /**
   * @generated from field: string spec = 1;
   */
  spec = "";

  /**
   * @generated from field: string local_tz = 2;
   */
  localTz = "";

  /**
   * @generated from field: optional string default_input_tz = 3;
   */
  defaultInputTz?: string;

  /**
   * @generated from field: pretransform.PreTransformValuesOpts opts = 4;
   */
  opts?: PreTransformValuesOpts;

  constructor(data?: PartialMessage<PreTransformValuesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformValuesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "local_tz", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "default_input_tz", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "opts", kind: "message", T: PreTransformValuesOpts },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformValuesRequest {
    return new PreTransformValuesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformValuesRequest {
    return new PreTransformValuesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformValuesRequest {
    return new PreTransformValuesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformValuesRequest | PlainMessage<PreTransformValuesRequest> | undefined, b: PreTransformValuesRequest | PlainMessage<PreTransformValuesRequest> | undefined): boolean {
    return proto3.util.equals(PreTransformValuesRequest, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformValuesResponse
 */
export class PreTransformValuesResponse extends Message<PreTransformValuesResponse> {
  /**
   * @generated from field: repeated tasks.ResponseTaskValue values = 1;
   */
  values: ResponseTaskValue[] = [];

  /**
   * @generated from field: repeated pretransform.PreTransformValuesWarning warnings = 2;
   */
  warnings: PreTransformValuesWarning[] = [];

  constructor(data?: PartialMessage<PreTransformValuesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformValuesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: ResponseTaskValue, repeated: true },
    { no: 2, name: "warnings", kind: "message", T: PreTransformValuesWarning, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformValuesResponse {
    return new PreTransformValuesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformValuesResponse {
    return new PreTransformValuesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformValuesResponse {
    return new PreTransformValuesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformValuesResponse | PlainMessage<PreTransformValuesResponse> | undefined, b: PreTransformValuesResponse | PlainMessage<PreTransformValuesResponse> | undefined): boolean {
    return proto3.util.equals(PreTransformValuesResponse, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformValuesWarning
 */
export class PreTransformValuesWarning extends Message<PreTransformValuesWarning> {
  /**
   * @generated from oneof pretransform.PreTransformValuesWarning.warning_type
   */
  warningType: {
    /**
     * @generated from field: pretransform.PreTransformRowLimitWarning row_limit = 1;
     */
    value: PreTransformRowLimitWarning;
    case: "rowLimit";
  } | {
    /**
     * @generated from field: pretransform.PlannerWarning planner = 2;
     */
    value: PlannerWarning;
    case: "planner";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PreTransformValuesWarning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformValuesWarning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "row_limit", kind: "message", T: PreTransformRowLimitWarning, oneof: "warning_type" },
    { no: 2, name: "planner", kind: "message", T: PlannerWarning, oneof: "warning_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformValuesWarning {
    return new PreTransformValuesWarning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformValuesWarning {
    return new PreTransformValuesWarning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformValuesWarning {
    return new PreTransformValuesWarning().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformValuesWarning | PlainMessage<PreTransformValuesWarning> | undefined, b: PreTransformValuesWarning | PlainMessage<PreTransformValuesWarning> | undefined): boolean {
    return proto3.util.equals(PreTransformValuesWarning, a, b);
  }
}

/**
 * / Common pre-transform messages
 *
 * @generated from message pretransform.PreTransformInlineDataset
 */
export class PreTransformInlineDataset extends Message<PreTransformInlineDataset> {
  /**
   * Inline dataset name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Serialized Arrow record batch in Arrow IPC format
   *
   * @generated from field: bytes table = 2;
   */
  table = new Uint8Array(0);

  constructor(data?: PartialMessage<PreTransformInlineDataset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformInlineDataset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformInlineDataset {
    return new PreTransformInlineDataset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformInlineDataset {
    return new PreTransformInlineDataset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformInlineDataset {
    return new PreTransformInlineDataset().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformInlineDataset | PlainMessage<PreTransformInlineDataset> | undefined, b: PreTransformInlineDataset | PlainMessage<PreTransformInlineDataset> | undefined): boolean {
    return proto3.util.equals(PreTransformInlineDataset, a, b);
  }
}

/**
 * @generated from message pretransform.PlannerWarning
 */
export class PlannerWarning extends Message<PlannerWarning> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<PlannerWarning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PlannerWarning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlannerWarning {
    return new PlannerWarning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlannerWarning {
    return new PlannerWarning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlannerWarning {
    return new PlannerWarning().fromJsonString(jsonString, options);
  }

  static equals(a: PlannerWarning | PlainMessage<PlannerWarning> | undefined, b: PlannerWarning | PlainMessage<PlannerWarning> | undefined): boolean {
    return proto3.util.equals(PlannerWarning, a, b);
  }
}

/**
 * / Pre Transform Extract Datasets
 *
 * @generated from message pretransform.PreTransformExtractDataset
 */
export class PreTransformExtractDataset extends Message<PreTransformExtractDataset> {
  /**
   * Result dataset name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Result dataset scope
   *
   * @generated from field: repeated uint32 scope = 2;
   */
  scope: number[] = [];

  /**
   * Serialized Arrow record batch in Arrow IPC format
   *
   * @generated from field: bytes table = 3;
   */
  table = new Uint8Array(0);

  constructor(data?: PartialMessage<PreTransformExtractDataset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformExtractDataset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scope", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 3, name: "table", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformExtractDataset {
    return new PreTransformExtractDataset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformExtractDataset {
    return new PreTransformExtractDataset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformExtractDataset {
    return new PreTransformExtractDataset().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformExtractDataset | PlainMessage<PreTransformExtractDataset> | undefined, b: PreTransformExtractDataset | PlainMessage<PreTransformExtractDataset> | undefined): boolean {
    return proto3.util.equals(PreTransformExtractDataset, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformExtractWarning
 */
export class PreTransformExtractWarning extends Message<PreTransformExtractWarning> {
  /**
   * @generated from oneof pretransform.PreTransformExtractWarning.warning_type
   */
  warningType: {
    /**
     * @generated from field: pretransform.PlannerWarning planner = 1;
     */
    value: PlannerWarning;
    case: "planner";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PreTransformExtractWarning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformExtractWarning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "planner", kind: "message", T: PlannerWarning, oneof: "warning_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformExtractWarning {
    return new PreTransformExtractWarning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformExtractWarning {
    return new PreTransformExtractWarning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformExtractWarning {
    return new PreTransformExtractWarning().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformExtractWarning | PlainMessage<PreTransformExtractWarning> | undefined, b: PreTransformExtractWarning | PlainMessage<PreTransformExtractWarning> | undefined): boolean {
    return proto3.util.equals(PreTransformExtractWarning, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformExtractResponse
 */
export class PreTransformExtractResponse extends Message<PreTransformExtractResponse> {
  /**
   * @generated from field: string spec = 1;
   */
  spec = "";

  /**
   * @generated from field: repeated pretransform.PreTransformExtractDataset datasets = 2;
   */
  datasets: PreTransformExtractDataset[] = [];

  /**
   * @generated from field: repeated pretransform.PreTransformExtractWarning warnings = 3;
   */
  warnings: PreTransformExtractWarning[] = [];

  constructor(data?: PartialMessage<PreTransformExtractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformExtractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "datasets", kind: "message", T: PreTransformExtractDataset, repeated: true },
    { no: 3, name: "warnings", kind: "message", T: PreTransformExtractWarning, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformExtractResponse {
    return new PreTransformExtractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformExtractResponse {
    return new PreTransformExtractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformExtractResponse {
    return new PreTransformExtractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformExtractResponse | PlainMessage<PreTransformExtractResponse> | undefined, b: PreTransformExtractResponse | PlainMessage<PreTransformExtractResponse> | undefined): boolean {
    return proto3.util.equals(PreTransformExtractResponse, a, b);
  }
}

/**
 * @generated from message pretransform.PreTransformExtractRequest
 */
export class PreTransformExtractRequest extends Message<PreTransformExtractRequest> {
  /**
   * @generated from field: string spec = 1;
   */
  spec = "";

  /**
   * @generated from field: string local_tz = 2;
   */
  localTz = "";

  /**
   * @generated from field: optional string default_input_tz = 3;
   */
  defaultInputTz?: string;

  /**
   * @generated from field: bool preserve_interactivity = 4;
   */
  preserveInteractivity = false;

  /**
   * @generated from field: repeated pretransform.PreTransformInlineDataset inline_datasets = 5;
   */
  inlineDatasets: PreTransformInlineDataset[] = [];

  constructor(data?: PartialMessage<PreTransformExtractRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pretransform.PreTransformExtractRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "local_tz", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "default_input_tz", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "preserve_interactivity", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "inline_datasets", kind: "message", T: PreTransformInlineDataset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransformExtractRequest {
    return new PreTransformExtractRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransformExtractRequest {
    return new PreTransformExtractRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransformExtractRequest {
    return new PreTransformExtractRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransformExtractRequest | PlainMessage<PreTransformExtractRequest> | undefined, b: PreTransformExtractRequest | PlainMessage<PreTransformExtractRequest> | undefined): boolean {
    return proto3.util.equals(PreTransformExtractRequest, a, b);
  }
}

